# Dplyr

```{r message=F}
library(tidyverse)
library(magrittr)
```

## Ressources

## What is `tidy-select`

- [Official docs here](https://dplyr.tidyverse.org/reference/select.html)

- In the end you always want a boolean vector  that has the length of the number of columns

## Selecting columns

### Selecting columns based on regex

- [Look here](https://tidyselect.r-lib.org/reference/starts_with.html) for all the possible helper functions.

- If you wanna apply a regex yourself you can use the `matches`-function. However there are "helpers" e.g. `starts_with`...

```{r select_regex}

# select all columns with three characters
mtcars %>% 
  select(
    matches("^[a-zA-Z]{3}$")
  ) %>% head

# cant use logical vector is select (e.g select(mtcars, c(TRUE, FALSE))) does not work
# Must be indexes!
mtcars %>%
  select(which(grepl("^[a-zA-Z]{3}$", names(.)))) %>% head

# select_if can use a boolean vector!! However is superseeded
mtcars %>%
  select_if(grepl("^[a-zA-Z]{3}$", names(.))) %>% head


# do the same in base r
idx = grepl("^[a-zA-Z]{3}$", names(mtcars))
mtcars[, idx] %>% head

```


### Selecting Columns based if any value in the column is `na`


**Approach 1**

> select(where(function(x){
    mean(x) > ...
}))


```{r}
mtcars_copy = mtcars
mtcars_copy[2,2] = NA
mtcars_copy %>% head

# 1. 
mtcars_copy %>%
  select(where(function(x) {
    sum(is.na(x)) == 0
  })) %>% head

# 2. base r
mtcars_copy[, colSums(is.na(mtcars_copy)) == 0]

# 3. apply
mtcars_copy[, apply(mtcars_copy, 2, function(x) sum(is.na(x)) == 0)]

# using any
mtcars_copy[, apply(mtcars_copy, 2, function(x) !any(is.na(x)))]

```

### Selecting Columns if the mean is > ...

```{r}
# add a string column
mtcars["string"] = "a"

# select only string columns or numeric ones with a mean > 10

# Should both work!!

mtcars %>%
  dplyr::select(
    where(
      function(x) is.character(x) | mean(x) > 10
    )
  )

mtcars %>%
  select(
    where(function(x){
      if(is.numeric(x)){
        mean(x) > 10
      }else{
        is.character(x) # must return true or false
      }
    })
  )
```


### Select Columns if the first value in the column is ...

```{r}
mtcars %>% 
  select(
    where(
      function(x)x[[1]] == "a"
    )
  )
```

## where vs "normal" tidy select

The docs say about where:

> where(): Applies a function to all variables and selects those for which the function returns TRUE.

So it essentially loops over the columns like lapply, whereas a code like this using the selection helpers only looks at the names of the variables:

```{r}
mtcars %>% select(matches("^d")) %>% head
```


This works because the "normal" select also takes indexes and by looping over the columns with `map_dbl` and checking which mean > 10 returns 1 we get the indexes

```{r}
library(purrr)
mtcars %>% select(which(map_dbl(.,
                                ~ mean(.x > 10)) == 1)) %>% head(n=2)
```

The same with `where` just that we need to take care of the string column as the function would return `NA` and that cant be used as index..

```{r}
library(purrr)
mtcars %>% select(where(~mean(.x) > 10 & !is.na(mean(.x))))
```





## Filtering Rows

## Rowwise Compute new Column with subset of existing columns

```{r}
mtcars %>% 
  mutate(
    med = pmap_dbl(select(., where(is.numeric)), ~median(c(...), na.rm = T))
  )  %>% glimpse
```




## Adding column indicating if group if max value in group is in top-n max values per group

**Steps: **

1. `group_by` the grouping variable

2. summarise get the max value per group

3. `inneer_join` the result with the original data-frame

```{r}

# which of the cyl-groups  contains the two highest disp

top12 = mtcars %>%
  group_by(cyl) %>%
  summarise(m = max(disp)) %>%
  arrange(desc(m)) %>%
  ungroup() %>%
  mutate(top2 = if_else(row_number() %in% c(1,2), T, F)) %>% 
  inner_join(
    ., mtcars, by=c("cyl")
  )

```

##### example of STACKOVERFLOW

```{r}
df = structure(list(id = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 
8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9), year = c("2017", "2018", 
"2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", 
"2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", 
"2025", "2026", "2017", "2018", "2019", "2020", "2021", "2022", 
"2023", "2024", "2025", "2026", "2017", "2018", "2019", "2020", 
"2021", "2022", "2023", "2024", "2025", "2026", "2017", "2018", 
"2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", 
"2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", 
"2025", "2026", "2017", "2018", "2019", "2020", "2021", "2022", 
"2023", "2024", "2025", "2026", "2017", "2018", "2019", "2020", 
"2021", "2022", "2023", "2024", "2025", "2026", "2017", "2018", 
"2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026"
), volume = c(0.0013, 0.0013, 0.0012579, 0.0011895, 0.0011421, 
0.0010842, 0.0010211, 0.0010158, 0.00099474, 0.00092632, 0.07878, 
0.078791, 0.077295, 0.076638, 0.075538, 0.074468, 0.074776, 0.074051, 
0.071706, 0.068056, 0.023269, 0.023011, 0.022374, 0.021962, 0.021408, 
0.020949, 0.020811, 0.020354, 0.019309, 0.018042, 0.0004, 0.0004, 
0.00038421, 0.00035263, 0.00033158, 0.00032105, 0.00026842, 0.00028421, 
0.00026842, 0.00024211, 0.0002, 0.0001, 0.00011579, 0, 0, 0, 
0, 0, 0, 0, 0.028422, 0.028361, 0.027768, 0.027501, 0.027029, 
0.02651, 0.026588, 0.026209, 0.025094, 0.023391, 0.0001, 0.0001, 
0, 0, 0, 0, 0, 0, 0, 0, 0.0047, 0.0047158, 0.0048368, 0.0048316, 
0.0049263, 0.0049737, 0.0049947, 0.0051684, 0.0052526, 0.0051842, 
0.0106, 0.010389, 0.010279, 0.010005, 0.0098421, 0.0096368, 0.0094053, 
0.0093368, 0.0092526, 0.0089316)), class = c("tbl_df", "tbl", 
"data.frame"), row.names = c(NA, -90L))

df %>%
  group_by(id) %>%
  summarise(m = max(volume)) %>%
  arrange(desc(m)) %>%
  mutate(top3 = if_else(row_number() %in% c(1, 2, 3), T, F)) %>%
  inner_join(., df, by = c("id")) -> top123
```


## list Columns (and `dplyr`)

```{r}


```


- tibbles and dataframes are lists of vectors!!
```{r}
l = tibble::tibble(x = runif(10),
                   y = 1:10)

typeof(l)
```


![](images/tibble.png)
[image source: ](https://dcl-prog.stanford.edu/list-columns.html)


- Meaning each column is a vector. Usually these are atomic vectors (recall chapter .. TODO in advanced R..), but these can also be lists.

![](images/tibble-list-col.png)
[image source: ](https://dcl-prog.stanford.edu/list-columns.html)

- List columns are much more versatile than atomic vectors. They can contain atomic vectors, other lists, tibbles, ...


### Creating List Columns

- It seems to be common to create list columns by modifying an existing "normal" tibble. Three common ways are:

  - `nest()`
  - `summarise` and `list`
  - `mutate` and `map`

#### `nest()`

- When calling `nest` the first argument is the new column-name. In this case it is `cars`.

- The second argument are the columns you want to have in the resulting dataframe in each element of the list column.

- Each column you do not specify automatically becomes a *grouping variable* and all the resulting tibble will have as many rows as unique combinations in these *grouping variables* there are.

```{r}
mtcars_with_list_col = mtcars %>%
  mutate(name = rownames(.)) %>%
  select(cyl, mpg, name) %>%
  nest(cars = c(mpg, name))

# inspect it
str(mtcars_with_list_col)
```

#### `summarise` and `list`

- Normally you use `group_by` and `summarise` to collapse groups into single rows. 

- You can also use `group_by`, `summarise` and `list` to create atomic vectors where each vector corresponds to one group of `cyl`

```{r}
mtcars_names_per_cyl = mtcars %>%
  mutate(name = rownames(.)) %>%
  group_by(cyl) %>%
  summarise(cars_per_cyl = list(name))
```


- What if you want to manipulate each vector before putting it into the list column


```{r}
mtcars_names_per_cyl_sorted = mtcars %>%
  mutate(name = rownames(.)) %>%
  group_by(cyl) %>%
  summarise(cars_per_cyl = list(sort(name)))
```


#### `mutate` and `map`

```{r}
n_values_per_car_letter = mtcars %>%
  mutate(name = rownames(.)) %>%
  mutate(random = map(name, ~ rnorm(n = str_length(.x)))) %>%
  select(name, random)

str(n_values_per_car_letter)  
```

### Manipulating

- say you want to get the number of rows for each data.frame in a list column

**Version 1**

```{r}

mtcars %>%
  mutate(name = rownames(.)) %>%
  nest(data_per_cyl = !cyl) %>% 
  mutate(
    nrow_per_cyl = map_dbl(data_per_cyl, nrow)
  )
```

**Version 2**

- usig `rowwise`


```{r}

mtcars %>%
  mutate(name = rownames(.)) %>%
  nest(data_per_cyl = !cyl) %>% 
  rowwise() %>%
  mutate(
    nrow_per_cyl = nrow(data_per_cyl)
  )
```

