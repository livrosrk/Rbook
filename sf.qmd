# SF

```{r echo=F, message=F}
library(sf)
library(terra)
library(dplyr)
library(spData)
library(tmap)
```

## Data

```{r}
elev = rast(system.file("raster/elev.tif", package = "spData"))
grain = rast(system.file("raster/grain.tif", package = "spData"))
```


### Vector data Opperations

#### Spatial Subsetting

- Taking a spatial object and returning only features that relate in space to another object 

- As in attribute subsettung the square bracket syntax can be used

- `x[y,,op=st_intersect]` where `x` is an `sf` object of which these rows will be returned that intersect with `y`

- `op=st_intersects` is the topological relation. `st_intersects()` is the default topological relation. So `x[y,]` is the same as the above

```{r}
canterbury = nz |> filter(Name == "Canterbury")
canterbury_height = nz_height[canterbury, ]


p_hpnz1 = tm_shape(nz) + tm_polygons(col = "white") +
  tm_shape(nz_height) + tm_symbols(shape = 2, col = "red", size = 0.25) +
  tm_layout(main.title = "High points in New Zealand", main.title.size = 1,
            bg.color = "lightblue")
p_hpnz2 = tm_shape(nz) + tm_polygons(col = "white") +
  tm_shape(canterbury) + tm_fill(col = "gray") + 
  tm_shape(canterbury_height) + tm_symbols(shape = 2, col = "red", size = 0.25) +
  tm_layout(main.title = "High points in Canterbury", main.title.size = 1,
            bg.color = "lightblue")
tmap_arrange(p_hpnz1, p_hpnz2, ncol = 2)
```

## Conversion between spatial formats