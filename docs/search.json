[
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "4  Dplyr",
    "section": "",
    "text": "library(tidyverse)\nlibrary(magrittr)"
  },
  {
    "objectID": "dplyr.html#ressources",
    "href": "dplyr.html#ressources",
    "title": "4  Dplyr",
    "section": "4.1 Ressources",
    "text": "4.1 Ressources"
  },
  {
    "objectID": "dplyr.html#what-is-tidy-select",
    "href": "dplyr.html#what-is-tidy-select",
    "title": "4  Dplyr",
    "section": "4.2 What is tidy-select",
    "text": "4.2 What is tidy-select\n\nOfficial docs here\nIn the end you always want a boolean vector that has the length of the number of columns"
  },
  {
    "objectID": "dplyr.html#selecting-columns",
    "href": "dplyr.html#selecting-columns",
    "title": "4  Dplyr",
    "section": "4.3 Selecting columns",
    "text": "4.3 Selecting columns\n\n4.3.1 Selecting columns based on regex\n\nLook here for all the possible helper functions.\nIf you wanna apply a regex yourself you can use the matches-function. However there are “helpers” e.g. starts_with…\n\n\n# select all columns with three characters\nmtcars %>% \n  select(\n    matches(\"^[a-zA-Z]{3}$\")\n  ) %>% head\n\n                   mpg cyl\nMazda RX4         21.0   6\nMazda RX4 Wag     21.0   6\nDatsun 710        22.8   4\nHornet 4 Drive    21.4   6\nHornet Sportabout 18.7   8\nValiant           18.1   6\n\n# cant use logical vector is select (e.g select(mtcars, c(TRUE, FALSE))) does not work\n# Must be indexes!\nmtcars %>%\n  select(which(grepl(\"^[a-zA-Z]{3}$\", names(.)))) %>% head\n\n                   mpg cyl\nMazda RX4         21.0   6\nMazda RX4 Wag     21.0   6\nDatsun 710        22.8   4\nHornet 4 Drive    21.4   6\nHornet Sportabout 18.7   8\nValiant           18.1   6\n\n# select_if can use a boolean vector!! However is superseeded\nmtcars %>%\n  select_if(grepl(\"^[a-zA-Z]{3}$\", names(.))) %>% head\n\n                   mpg cyl\nMazda RX4         21.0   6\nMazda RX4 Wag     21.0   6\nDatsun 710        22.8   4\nHornet 4 Drive    21.4   6\nHornet Sportabout 18.7   8\nValiant           18.1   6\n\n# do the same in base r\nidx = grepl(\"^[a-zA-Z]{3}$\", names(mtcars))\nmtcars[, idx] %>% head\n\n                   mpg cyl\nMazda RX4         21.0   6\nMazda RX4 Wag     21.0   6\nDatsun 710        22.8   4\nHornet 4 Drive    21.4   6\nHornet Sportabout 18.7   8\nValiant           18.1   6\n\n\n\n\n4.3.2 Selecting Columns based if any value in the column is na\nApproach 1\n\nselect(where(function(x){ mean(x) > … }))\n\n\nmtcars_copy = mtcars\nmtcars_copy[2,2] = NA\nmtcars_copy %>% head\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0  NA  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n# 1. \nmtcars_copy %>%\n  select(where(function(x) {\n    sum(is.na(x)) == 0\n  })) %>% head\n\n                   mpg disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1  225 105 2.76 3.460 20.22  1  0    3    1\n\n# 2. base r\nmtcars_copy[, colSums(is.na(mtcars_copy)) == 0]\n\n                     mpg  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n# 3. apply\nmtcars_copy[, apply(mtcars_copy, 2, function(x) sum(is.na(x)) == 0)]\n\n                     mpg  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n# using any\nmtcars_copy[, apply(mtcars_copy, 2, function(x) !any(is.na(x)))]\n\n                     mpg  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n\n\n4.3.3 Selecting Columns if the mean is > …\n\n# add a string column\nmtcars[\"string\"] = \"a\"\n\n# select only string columns or numeric ones with a mean > 10\n\n# Should both work!!\n\nmtcars %>%\n  dplyr::select(\n    where(\n      function(x) is.character(x) | mean(x) > 10\n    )\n  )\n\nWarning in mean.default(x): argument is not numeric or logical: returning NA\n\n\n                     mpg  disp  hp  qsec string\nMazda RX4           21.0 160.0 110 16.46      a\nMazda RX4 Wag       21.0 160.0 110 17.02      a\nDatsun 710          22.8 108.0  93 18.61      a\nHornet 4 Drive      21.4 258.0 110 19.44      a\nHornet Sportabout   18.7 360.0 175 17.02      a\nValiant             18.1 225.0 105 20.22      a\nDuster 360          14.3 360.0 245 15.84      a\nMerc 240D           24.4 146.7  62 20.00      a\nMerc 230            22.8 140.8  95 22.90      a\nMerc 280            19.2 167.6 123 18.30      a\nMerc 280C           17.8 167.6 123 18.90      a\nMerc 450SE          16.4 275.8 180 17.40      a\nMerc 450SL          17.3 275.8 180 17.60      a\nMerc 450SLC         15.2 275.8 180 18.00      a\nCadillac Fleetwood  10.4 472.0 205 17.98      a\nLincoln Continental 10.4 460.0 215 17.82      a\nChrysler Imperial   14.7 440.0 230 17.42      a\nFiat 128            32.4  78.7  66 19.47      a\nHonda Civic         30.4  75.7  52 18.52      a\nToyota Corolla      33.9  71.1  65 19.90      a\nToyota Corona       21.5 120.1  97 20.01      a\nDodge Challenger    15.5 318.0 150 16.87      a\nAMC Javelin         15.2 304.0 150 17.30      a\nCamaro Z28          13.3 350.0 245 15.41      a\nPontiac Firebird    19.2 400.0 175 17.05      a\nFiat X1-9           27.3  79.0  66 18.90      a\nPorsche 914-2       26.0 120.3  91 16.70      a\nLotus Europa        30.4  95.1 113 16.90      a\nFord Pantera L      15.8 351.0 264 14.50      a\nFerrari Dino        19.7 145.0 175 15.50      a\nMaserati Bora       15.0 301.0 335 14.60      a\nVolvo 142E          21.4 121.0 109 18.60      a\n\nmtcars %>%\n  select(\n    where(function(x){\n      if(is.numeric(x)){\n        mean(x) > 10\n      }else{\n        is.character(x) # must return true or false\n      }\n    })\n  )\n\n                     mpg  disp  hp  qsec string\nMazda RX4           21.0 160.0 110 16.46      a\nMazda RX4 Wag       21.0 160.0 110 17.02      a\nDatsun 710          22.8 108.0  93 18.61      a\nHornet 4 Drive      21.4 258.0 110 19.44      a\nHornet Sportabout   18.7 360.0 175 17.02      a\nValiant             18.1 225.0 105 20.22      a\nDuster 360          14.3 360.0 245 15.84      a\nMerc 240D           24.4 146.7  62 20.00      a\nMerc 230            22.8 140.8  95 22.90      a\nMerc 280            19.2 167.6 123 18.30      a\nMerc 280C           17.8 167.6 123 18.90      a\nMerc 450SE          16.4 275.8 180 17.40      a\nMerc 450SL          17.3 275.8 180 17.60      a\nMerc 450SLC         15.2 275.8 180 18.00      a\nCadillac Fleetwood  10.4 472.0 205 17.98      a\nLincoln Continental 10.4 460.0 215 17.82      a\nChrysler Imperial   14.7 440.0 230 17.42      a\nFiat 128            32.4  78.7  66 19.47      a\nHonda Civic         30.4  75.7  52 18.52      a\nToyota Corolla      33.9  71.1  65 19.90      a\nToyota Corona       21.5 120.1  97 20.01      a\nDodge Challenger    15.5 318.0 150 16.87      a\nAMC Javelin         15.2 304.0 150 17.30      a\nCamaro Z28          13.3 350.0 245 15.41      a\nPontiac Firebird    19.2 400.0 175 17.05      a\nFiat X1-9           27.3  79.0  66 18.90      a\nPorsche 914-2       26.0 120.3  91 16.70      a\nLotus Europa        30.4  95.1 113 16.90      a\nFord Pantera L      15.8 351.0 264 14.50      a\nFerrari Dino        19.7 145.0 175 15.50      a\nMaserati Bora       15.0 301.0 335 14.60      a\nVolvo 142E          21.4 121.0 109 18.60      a\n\n\n\n\n4.3.4 Select Columns if the first value in the column is …\n\nmtcars %>% \n  select(\n    where(\n      function(x)x[[1]] == \"a\"\n    )\n  )\n\n                    string\nMazda RX4                a\nMazda RX4 Wag            a\nDatsun 710               a\nHornet 4 Drive           a\nHornet Sportabout        a\nValiant                  a\nDuster 360               a\nMerc 240D                a\nMerc 230                 a\nMerc 280                 a\nMerc 280C                a\nMerc 450SE               a\nMerc 450SL               a\nMerc 450SLC              a\nCadillac Fleetwood       a\nLincoln Continental      a\nChrysler Imperial        a\nFiat 128                 a\nHonda Civic              a\nToyota Corolla           a\nToyota Corona            a\nDodge Challenger         a\nAMC Javelin              a\nCamaro Z28               a\nPontiac Firebird         a\nFiat X1-9                a\nPorsche 914-2            a\nLotus Europa             a\nFord Pantera L           a\nFerrari Dino             a\nMaserati Bora            a\nVolvo 142E               a"
  },
  {
    "objectID": "dplyr.html#filtering-rows",
    "href": "dplyr.html#filtering-rows",
    "title": "4  Dplyr",
    "section": "4.5 Filtering Rows",
    "text": "4.5 Filtering Rows"
  },
  {
    "objectID": "dplyr.html#rowwise-compute-new-column-with-subset-of-existing-columns",
    "href": "dplyr.html#rowwise-compute-new-column-with-subset-of-existing-columns",
    "title": "4  Dplyr",
    "section": "4.6 Rowwise Compute new Column with subset of existing columns",
    "text": "4.6 Rowwise Compute new Column with subset of existing columns\n\nmtcars %>% \n  mutate(\n    med = pmap_dbl(select(., where(is.numeric)), ~median(c(...), na.rm = T))\n  )  %>% glimpse\n\nRows: 32\nColumns: 13\n$ mpg    <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.…\n$ cyl    <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, …\n$ disp   <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, …\n$ hp     <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 1…\n$ drat   <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.9…\n$ wt     <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, …\n$ qsec   <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, …\n$ vs     <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, …\n$ am     <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, …\n$ gear   <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, …\n$ carb   <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, …\n$ string <chr> \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"…\n$ med    <dbl> 4.000, 4.000, 4.000, 3.215, 3.440, 3.460, 4.000, 4.000, 4.000, …"
  },
  {
    "objectID": "dplyr.html#adding-column-indicating-if-group-if-max-value-in-group-is-in-top-n-max-values-per-group",
    "href": "dplyr.html#adding-column-indicating-if-group-if-max-value-in-group-is-in-top-n-max-values-per-group",
    "title": "4  Dplyr",
    "section": "4.7 Adding column indicating if group if max value in group is in top-n max values per group",
    "text": "4.7 Adding column indicating if group if max value in group is in top-n max values per group\nSteps: \n\ngroup_by the grouping variable\nsummarise get the max value per group\ninneer_join the result with the original data-frame\n\n\n# which of the cyl-groups  contains the two highest disp\n\ntop12 = mtcars %>%\n  group_by(cyl) %>%\n  summarise(m = max(disp)) %>%\n  arrange(desc(m)) %>%\n  ungroup() %>%\n  mutate(top2 = if_else(row_number() %in% c(1,2), T, F)) %>% \n  inner_join(\n    ., mtcars, by=c(\"cyl\")\n  )\n\n\n4.7.0.0.1 example of STACKOVERFLOW\n\ndf = structure(list(id = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, \n2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, \n4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, \n6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, \n8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9), year = c(\"2017\", \"2018\", \n\"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \n\"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \n\"2025\", \"2026\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \n\"2023\", \"2024\", \"2025\", \"2026\", \"2017\", \"2018\", \"2019\", \"2020\", \n\"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2017\", \"2018\", \n\"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \n\"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \n\"2025\", \"2026\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \n\"2023\", \"2024\", \"2025\", \"2026\", \"2017\", \"2018\", \"2019\", \"2020\", \n\"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2017\", \"2018\", \n\"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\n), volume = c(0.0013, 0.0013, 0.0012579, 0.0011895, 0.0011421, \n0.0010842, 0.0010211, 0.0010158, 0.00099474, 0.00092632, 0.07878, \n0.078791, 0.077295, 0.076638, 0.075538, 0.074468, 0.074776, 0.074051, \n0.071706, 0.068056, 0.023269, 0.023011, 0.022374, 0.021962, 0.021408, \n0.020949, 0.020811, 0.020354, 0.019309, 0.018042, 0.0004, 0.0004, \n0.00038421, 0.00035263, 0.00033158, 0.00032105, 0.00026842, 0.00028421, \n0.00026842, 0.00024211, 0.0002, 0.0001, 0.00011579, 0, 0, 0, \n0, 0, 0, 0, 0.028422, 0.028361, 0.027768, 0.027501, 0.027029, \n0.02651, 0.026588, 0.026209, 0.025094, 0.023391, 0.0001, 0.0001, \n0, 0, 0, 0, 0, 0, 0, 0, 0.0047, 0.0047158, 0.0048368, 0.0048316, \n0.0049263, 0.0049737, 0.0049947, 0.0051684, 0.0052526, 0.0051842, \n0.0106, 0.010389, 0.010279, 0.010005, 0.0098421, 0.0096368, 0.0094053, \n0.0093368, 0.0092526, 0.0089316)), class = c(\"tbl_df\", \"tbl\", \n\"data.frame\"), row.names = c(NA, -90L))\n\ndf %>%\n  group_by(id) %>%\n  summarise(m = max(volume)) %>%\n  arrange(desc(m)) %>%\n  mutate(top3 = if_else(row_number() %in% c(1, 2, 3), T, F)) %>%\n  inner_join(., df, by = c(\"id\")) -> top123"
  },
  {
    "objectID": "dplyr.html#list-columns-and-dplyr",
    "href": "dplyr.html#list-columns-and-dplyr",
    "title": "4  Dplyr",
    "section": "4.8 list Columns (and dplyr)",
    "text": "4.8 list Columns (and dplyr)\n\n\n\n\ntibbles and dataframes are lists of vectors!!\n\n\nl = tibble::tibble(x = runif(10),\n                   y = 1:10)\n\ntypeof(l)\n\n[1] \"list\"\n\n\n image source:\n\nMeaning each column is a vector. Usually these are atomic vectors (recall chapter .. TODO in advanced R..), but these can also be lists.\n\n image source:\n\nList columns are much more versatile than atomic vectors. They can contain atomic vectors, other lists, tibbles, …\n\n\n4.8.1 Creating List Columns\n\nIt seems to be common to create list columns by modifying an existing “normal” tibble. Three common ways are:\n\nnest()\nsummarise and list\nmutate and map\n\n\n\n4.8.1.1 nest()\n\nWhen calling nest the first argument is the new column-name. In this case it is cars.\nThe second argument are the columns you want to have in the resulting dataframe in each element of the list column.\nEach column you do not specify automatically becomes a grouping variable and all the resulting tibble will have as many rows as unique combinations in these grouping variables there are.\n\n\nmtcars_with_list_col = mtcars %>%\n  mutate(name = rownames(.)) %>%\n  select(cyl, mpg, name) %>%\n  nest(cars = c(mpg, name))\n\n# inspect it\nstr(mtcars_with_list_col)\n\ntibble [3 × 2] (S3: tbl_df/tbl/data.frame)\n $ cyl : num [1:3] 6 4 8\n $ cars:List of 3\n  ..$ : tibble [7 × 2] (S3: tbl_df/tbl/data.frame)\n  .. ..$ mpg : num [1:7] 21 21 21.4 18.1 19.2 17.8 19.7\n  .. ..$ name: chr [1:7] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Hornet 4 Drive\" \"Valiant\" ...\n  ..$ : tibble [11 × 2] (S3: tbl_df/tbl/data.frame)\n  .. ..$ mpg : num [1:11] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26 30.4 ...\n  .. ..$ name: chr [1:11] \"Datsun 710\" \"Merc 240D\" \"Merc 230\" \"Fiat 128\" ...\n  ..$ : tibble [14 × 2] (S3: tbl_df/tbl/data.frame)\n  .. ..$ mpg : num [1:14] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 ...\n  .. ..$ name: chr [1:14] \"Hornet Sportabout\" \"Duster 360\" \"Merc 450SE\" \"Merc 450SL\" ...\n\n\n\n\n4.8.1.2 summarise and list\n\nNormally you use group_by and summarise to collapse groups into single rows.\nYou can also use group_by, summarise and list to create atomic vectors where each vector corresponds to one group of cyl\n\n\nmtcars_names_per_cyl = mtcars %>%\n  mutate(name = rownames(.)) %>%\n  group_by(cyl) %>%\n  summarise(cars_per_cyl = list(name))\n\n\nWhat if you want to manipulate each vector before putting it into the list column\n\n\nmtcars_names_per_cyl_sorted = mtcars %>%\n  mutate(name = rownames(.)) %>%\n  group_by(cyl) %>%\n  summarise(cars_per_cyl = list(sort(name)))\n\n\n\n4.8.1.3 mutate and map\n\nn_values_per_car_letter = mtcars %>%\n  mutate(name = rownames(.)) %>%\n  mutate(random = map(name, ~ rnorm(n = str_length(.x)))) %>%\n  select(name, random)\n\nstr(n_values_per_car_letter)  \n\n'data.frame':   32 obs. of  2 variables:\n $ name  : chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ random:List of 32\n  ..$ : num  -0.642 -0.739 2.134 0.698 -0.556 ...\n  ..$ : num  -1.22 -2.038 -0.266 0.208 -0.292 ...\n  ..$ : num  1.339 -0.748 0.501 -0.447 -0.187 ...\n  ..$ : num  1.5916 -0.2437 0.2315 -0.0341 1.2387 ...\n  ..$ : num  -0.64 0.461 -1.438 0.364 -0.967 ...\n  ..$ : num  -1.496 -1.173 -1.198 -0.879 -1.868 ...\n  ..$ : num  0.0964 -1.9081 -0.9482 0.4722 2.5126 ...\n  ..$ : num  -0.122 -1.128 0.777 -0.975 -0.555 ...\n  ..$ : num  1.065 0.423 -0.5229 0.3957 -0.0766 ...\n  ..$ : num  0.191 -0.295 1.835 -0.616 -0.135 ...\n  ..$ : num  1.045 -1.151 -0.366 1.159 0.394 ...\n  ..$ : num  -0.687 -0.682 2.323 -0.518 -0.674 ...\n  ..$ : num  0.8023 0.3583 -0.0716 2.1396 -0.3264 ...\n  ..$ : num  -1.223 1.028 0.371 -0.235 0.895 ...\n  ..$ : num  0.00585 -1.33862 0.2603 1.07641 1.61986 ...\n  ..$ : num  0.437 0.193 0.831 1.086 -1.162 ...\n  ..$ : num  -0.513 1.174 -0.445 0.644 -0.127 ...\n  ..$ : num  -0.115 -0.218 -0.43 -0.107 0.904 ...\n  ..$ : num  -0.438 -0.88 -1.489 0.761 1.325 ...\n  ..$ : num  1.219 -2.165 -0.317 0.293 -1.136 ...\n  ..$ : num  1.352 -0.469 -0.452 1.102 -0.776 ...\n  ..$ : num  -0.727 -1.243 -0.689 -0.369 -1.01 ...\n  ..$ : num  -0.374 0.0611 -0.3538 0.0774 -1.7302 ...\n  ..$ : num  -2.207 -0.554 -0.893 -0.396 -0.929 ...\n  ..$ : num  0.287 -0.679 0.354 -0.609 -0.728 ...\n  ..$ : num  -0.5951 0.3829 -0.4521 -0.2426 0.0218 ...\n  ..$ : num  1.725 0.524 -0.215 -0.174 1.596 ...\n  ..$ : num  -1.014 -0.467 0.337 -0.525 0.627 ...\n  ..$ : num  -1.222 -1.355 -1.235 -1.176 -0.391 ...\n  ..$ : num  -0.372 -0.582 -0.618 -0.817 -0.732 ...\n  ..$ : num  0.169 -1.743 -1.636 -1.266 1.323 ...\n  ..$ : num  -0.4026 1.1224 -0.6889 -2.19 -0.0613 ...\n\n\n\n\n\n4.8.2 Manipulating\n\nsay you want to get the number of rows for each data.frame in a list column\n\nVersion 1\n\nmtcars %>%\n  mutate(name = rownames(.)) %>%\n  nest(data_per_cyl = !cyl) %>% \n  mutate(\n    nrow_per_cyl = map_dbl(data_per_cyl, nrow)\n  )\n\n# A tibble: 3 × 3\n    cyl data_per_cyl       nrow_per_cyl\n  <dbl> <list>                    <dbl>\n1     6 <tibble [7 × 12]>             7\n2     4 <tibble [11 × 12]>           11\n3     8 <tibble [14 × 12]>           14\n\n\nVersion 2\n\nusig rowwise\n\n\nmtcars %>%\n  mutate(name = rownames(.)) %>%\n  nest(data_per_cyl = !cyl) %>% \n  rowwise() %>%\n  mutate(\n    nrow_per_cyl = nrow(data_per_cyl)\n  )\n\n# A tibble: 3 × 3\n# Rowwise: \n    cyl data_per_cyl       nrow_per_cyl\n  <dbl> <list>                    <int>\n1     6 <tibble [7 × 12]>             7\n2     4 <tibble [11 × 12]>           11\n3     8 <tibble [14 × 12]>           14"
  },
  {
    "objectID": "ggplot.html",
    "href": "ggplot.html",
    "title": "6  GGPLOT",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ tibble  3.1.6     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n✔ purrr   0.3.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "ggplot.html#types",
    "href": "ggplot.html#types",
    "title": "6  GGPLOT",
    "section": "6.1 Types",
    "text": "6.1 Types\n\n6.1.1 Stacked Bar Chart\nThe data first:\n\nshare = rep(0.1, 10)\nvals = letters[1:10]\ndata = data.frame(\n share, vals \n)\n\nThe plot\n\nggplot(data) +\n  geom_col(aes(x = share,\n               y = \"a\", # if you were to use a numeric like one you need to set the orientation to \"y\"\n               fill = vals),\n           # orientation = \"y\",\n           position = position_stack())\n\n\n\n\n\ndf = data.frame(\n  x = 1:10,\n  y = 2:11\n)\n\n\n{\n // somehow get access to the df\n}"
  },
  {
    "objectID": "ggplot.html#internals",
    "href": "ggplot.html#internals",
    "title": "6  GGPLOT",
    "section": "6.2 Internals",
    "text": "6.2 Internals\nThe data\n\n\n   names count share label   color\nv1    v1    55  0.76  76 % #df91a3\nv2    v2    13  0.18  18 % #A5AA99\nv3    v3     2  0.03  <NA> #A5AA99\nv4    v4     2  0.03  <NA> #A5AA99\n\n\n\n6.2.1 Inspecting a Horizontal Stacked Bar Chart\n\npl_works = ggplot(df) +\n  geom_col(\n    aes(x = share,\n        y = \"a\",\n        group = names),\n    color = \"black\",\n    fill = df$color,\n    position = ggplot2::position_fill()\n  ) \n\n\npl_not_works = ggplot(df) +\n  geom_col(\n    aes(x = share,\n        y = 1,\n        group = names),\n    color = \"black\",\n    fill = df$color,\n    position = ggplot2::position_fill()\n  ) \n\n\n6.2.1.0.1 The Computed Data\n\nThe ggplot function ggplot2::layer_data( <plot-object> ) gives you back the data that is used to draw the objects\nSimilarly the ggplot2::ggplot_build( <plot-object> ) gives you back a list with the elements data (again), layout and the actual plot already!\nAs the ggplot_build()-function is a method (like print is), it could (in theory be used for other objects too). So you can inspect it with\n\n\nggplot2:::ggplot_build.ggplot\n\nfunction (plot) \n{\n    plot <- plot_clone(plot)\n    if (length(plot$layers) == 0) {\n        plot <- plot + geom_blank()\n    }\n    layers <- plot$layers\n    layer_data <- lapply(layers, function(y) y$layer_data(plot$data))\n    scales <- plot$scales\n    by_layer <- function(f) {\n        out <- vector(\"list\", length(data))\n        for (i in seq_along(data)) {\n            out[[i]] <- f(l = layers[[i]], d = data[[i]])\n        }\n        out\n    }\n    data <- layer_data\n    data <- by_layer(function(l, d) l$setup_layer(d, plot))\n    layout <- create_layout(plot$facet, plot$coordinates)\n    data <- layout$setup(data, plot$data, plot$plot_env)\n    data <- by_layer(function(l, d) l$compute_aesthetics(d, plot))\n    data <- lapply(data, scales_transform_df, scales = scales)\n    scale_x <- function() scales$get_scales(\"x\")\n    scale_y <- function() scales$get_scales(\"y\")\n    layout$train_position(data, scale_x(), scale_y())\n    data <- layout$map_position(data)\n    data <- by_layer(function(l, d) l$compute_statistic(d, layout))\n    data <- by_layer(function(l, d) l$map_statistic(d, plot))\n    scales_add_missing(plot, c(\"x\", \"y\"), plot$plot_env)\n    data <- by_layer(function(l, d) l$compute_geom_1(d))\n    data <- by_layer(function(l, d) l$compute_position(d, layout))\n    layout$reset_scales()\n    layout$train_position(data, scale_x(), scale_y())\n    layout$setup_panel_params()\n    data <- layout$map_position(data)\n    npscales <- scales$non_position_scales()\n    if (npscales$n() > 0) {\n        lapply(data, scales_train_df, scales = npscales)\n        data <- lapply(data, scales_map_df, scales = npscales)\n    }\n    data <- by_layer(function(l, d) l$compute_geom_2(d))\n    data <- by_layer(function(l, d) l$finish_statistics(d))\n    data <- layout$finish_data(data)\n    plot$labels$alt <- get_alt_text(plot)\n    structure(list(data = data, layout = layout, plot = plot), \n        class = \"ggplot_built\")\n}\n<bytecode: 0x55df0b45bbb8>\n<environment: namespace:ggplot2>\n\n\n\nld_works = layer_data(pl_works) %>% mutate(works = \"y\") %>% as_tibble()\nld_not_works = layer_data(pl_not_works) %>% mutate(works = \"n\") %>% as_tibble()\n\n\ncurve_df = data.frame(\n  x = .2,\n  y = 1,\n  xend = .7,\n  yend = 1.2\n)\n\npl_with_arrow = pl_works +\n  geom_curve(data = curve_df,\n             aes(\n               x = x,\n               y = y,\n               xend = xend,\n               yend = yend\n             ))"
  },
  {
    "objectID": "ggplot.html#examples",
    "href": "ggplot.html#examples",
    "title": "6  GGPLOT",
    "section": "6.3 Examples",
    "text": "6.3 Examples\n\n6.3.1 1: Stacked Horizontal Chicklets\n\nFrom here\n\n\n# load libraries\n# devtools::install_github(\"tidyverse/ggplot2\")\nlibrary(ggplot2)\nlibrary(ggchicklet)\nlibrary(ggtext)\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(grid)\n\n# import data\ndat <- dat <- data.frame(\n  Sport = c(\"NFL\", \"NFL\", \"NFL\", \"MLB\", \"MLB\", \"MLB\", \"NBA\", \"NBA\",\n            \"NBA\", \"NHL\", \"NHL\", \"NHL\", \"EPL\", \"EPL\", \"EPL\"),\n  Type = c(\"Game Action\", \"Nonaction\", \"Commercials\", \"Game Action\", \n            \"Nonaction\", \"Commercials\", \"Game Action\", \"Nonaction\", \"Commercials\", \n            \"Game Action\", \"Nonaction\", \"Commercials\", \"Game Action\", \"Nonaction\", \n            \"Commercials\"),\n  Time = c(18, 140.6, 49.9, 22.5, 150.9, 51.8, 49.6, 61.8,\n           33.5, 63, 56.6, 37.4, 58.7, 47.8, 10.1),\n  stringsAsFactors = FALSE)\n\n# refactor levels\ndat <- dat %>% group_by(Sport) %>% mutate(Percent = Time/sum(Time)) %>% ungroup() %>% \n  mutate(Sport = fct_relevel(\n    Sport,\n    rev(c(\"NFL\", \"MLB\", \"NBA\", \"NHL\", \"EPL\")))\n  ) %>% \n  mutate(Type = fct_relevel(\n    Type,\n    c(\"Commercials\",\"Nonaction\",\"Game Action\"))\n  ) \n\n# keep trailing zeroes and add \"min\" to first bar value labels\ndat$Label <- as.character(sprintf(\"%.1f\", dat$Time))\ndat$Label <- ifelse(dat$Type == \"Game Action\", paste0(dat$Label, \" min\"), dat$Label)\n\n# generate plot\ngg <- ggplot(dat, aes(Sport, Percent,  fill = Type, label = Label)) +\n  geom_chicklet(\n    width = 1,\n    radius = unit(6, units = \"pt\"),\n    position = ggplot2::position_stack(reverse = FALSE)\n  ) +\n  geom_text(size = 4,\n            fontface = \"bold\",\n            position = position_stack(vjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +  \n  coord_flip() +\n  theme_minimal() +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_markdown(hjust = 0.5, family = \"Raleway\"),\n    plot.subtitle = element_markdown(hjust = 0.5),\n    plot.caption = element_markdown(\n      hjust = 0,\n      size = 11,\n      margin = unit(c(0, 0, 0, 0), \"cm\"),\n      color = \"#718c9e\"\n    ),\n    legend.text = element_markdown(size = 11),\n    axis.text = element_text(face = \"bold\", size = 11),\n    axis.text.x = element_blank(),\n    axis.title.y = element_markdown(\n      hjust = 0,\n      size = 20,\n      margin = unit(c(0, 0, 0, 0), \"cm\"),\n      color = \"#718c9e\"\n    ),\n    panel.grid = element_blank(),\n    axis.title.x = element_markdown(\n      halign = 0,\n      margin = margin(2, 0, 15, 0),\n      fill = \"transparent\"\n    )\n    \n  ) +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\n      `Game Action` = \"#FA759F\",\n      Nonaction = \"#B5BEC9\",\n      Commercials = \"#72D4DB\"\n    ),\n    labels = c(\n      # `Game Action` = \"<strong style='color:#FA759F'>GAME ACTION</strong> (BALL OR PUCK IN PLAY)\",\n      # Nonaction = \"<strong style='color:#B5BEC9'>NONACTION</strong> (GAME STOPPAGE, COMMENTARY, ETC.)\",\n      # Commercials = \"<strong style='color:#72D4DB'>COMMERCIALS</strong>\")\n      `Game Action` = \"<strong>GAME ACTION</strong> (BALL OR PUCK IN PLAY)\",\n      Nonaction = \"<strong>NONACTION</strong> (GAME STOPPAGE, COMMENTARY, ETC.)\",\n      Commercials = \"<strong>COMMERCIALS</strong>\"\n    ),\n    guide = guide_legend(reverse = TRUE)\n  ) +\n  labs(\n    y = \"<span style='font-size:13pt;'>The average share of broadcast time showing <strong style='color:#FA759F'>GAME ACTION</strong> is highest in<br>the English Premier League - but there is more total action in an average<br>National Hockey League game, which lasts longer.</span>\",\n    x = NULL,\n    fill = NULL,\n    title = \"<b>NFL and MLB games are long, slow affairs</b>\",\n    subtitle = \"Minutes by broadcast by what is shown on screen across five major men's sports leagues\",\n    caption = \"Games that we included: 10 NFL regular-season games between Nov. 7 amd Nov. 18, 2019. 17 MLB postseason games, including all the games in the 2019\n    ACLS, NLCS, and World<br>Series; 10 NBA regular-season games between Nov. 6 and Nov. 15, 2019; 10 NHL regular-season games between Nov. 5 and Nov. 19, 2019, including three overtime games;\n    and<br>seven English Premier League games between Nov. 9 and Nov. 23, 2019. NBA game action includes free throws, so the action time exceeds the game time.<br>\n    <br>\n    FivethirtyEight SOURCE: UNIVERSITY OF TEXAS AT AUSTIN SPORTS ANALYTICS COURSE\"\n  )\n\ngg\n\nalignTitles <- function(ggplot, title = NULL, subtitle = NULL, caption = NULL) {\n  # grab the saved ggplot2 object\n  g <- ggplotGrob(ggplot)\n  \n  \n  # find the object which provides the plot information for the title, subtitle, and caption\n  if(!is.null(title)) {\n    g$layout[which(g$layout$name == \"title\"),]$l <- title\n  }\n  if(!is.null(subtitle)) {\n    g$layout[which(g$layout$name == \"subtitle\"),]$l <- subtitle\n  }\n  if(!is.null(caption)) {\n    g$layout[which(g$layout$name == \"caption\"),]$l <- caption\n  }\n  g\n}\n\n# align caption to y axis value labels\ngg2 <- alignTitles(gg, caption = 2)\ngrid.draw(gg2)\n\n# add arrow\nx <- rev(c(0.25, 0.25, 0.28, 0.28))\ny <- rev(c(0.2, 0.15, 0.15, 0.15))\ngrid.bezier(x, y, gp=gpar(lwd=1.5, fill=\"black\"),\n            arrow=arrow(type=\"open\",length = unit(0.1, \"inches\")))"
  },
  {
    "objectID": "mapping.html",
    "href": "mapping.html",
    "title": "5  Mapping",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "mapping.html#baseapply",
    "href": "mapping.html#baseapply",
    "title": "5  Mapping",
    "section": "5.1 base::apply",
    "text": "5.1 base::apply"
  },
  {
    "objectID": "mapping.html#purrmap",
    "href": "mapping.html#purrmap",
    "title": "5  Mapping",
    "section": "5.2 purr::map",
    "text": "5.2 purr::map\n\n5.2.1 Find the number of NAs per column in a dataframe\n\npurrr::map(mtcars %>% select(where(is.numeric)), ~sum(is.na(.x)))\n\n$mpg\n[1] 0\n\n$cyl\n[1] 0\n\n$disp\n[1] 0\n\n$hp\n[1] 0\n\n$drat\n[1] 0\n\n$wt\n[1] 0\n\n$qsec\n[1] 0\n\n$vs\n[1] 0\n\n$am\n[1] 0\n\n$gear\n[1] 0\n\n$carb\n[1] 0"
  },
  {
    "objectID": "mapping.html#purrrmap2",
    "href": "mapping.html#purrrmap2",
    "title": "5  Mapping",
    "section": "5.3 purrr::map2",
    "text": "5.3 purrr::map2\n\ndf =\n  tibble(\n    a = c(1, 2, 4),\n    b = c(6, 5, 3)\n  )\n\n\ndf %>% \n  mutate(\n    min_a_b = map2_dbl(a,b,min)\n  )\n\n# A tibble: 3 × 3\n      a     b min_a_b\n  <dbl> <dbl>   <dbl>\n1     1     6       1\n2     2     5       2\n3     4     3       3\n\n\nBy default, mutate() uses column-wise operations. map2_dbl() produces a column the same length at a and b. We can accomplish the same calculation using row-wise operations.\n\ndf %>%\n  rowwise() %>%\n  mutate(min = min(a, b)) %>% ungroup()\n\n# A tibble: 3 × 3\n      a     b   min\n  <dbl> <dbl> <dbl>\n1     1     6     1\n2     2     5     2\n3     4     3     3"
  },
  {
    "objectID": "mapping.html#purrrpmap",
    "href": "mapping.html#purrrpmap",
    "title": "5  Mapping",
    "section": "5.4 purrr::pmap",
    "text": "5.4 purrr::pmap\n\ntakes an arbitrary amout of lists as input.\nHowever:\n\n\nThe actual input to purrr::map is  ONE SINGLE LIST \n\n\nl1 = list(a = 1, b=2, c=3)\nl2 = list(a = 11, b=22, c=33)\nl3 = list(a = 111, b=222, c=333)\n\nl123 = list(l1, l2, l3)\n\n# go over the three lists in parallel and each time select the minimal value\npurrr::pmap(l123, min)\n\n$a\n[1] 1\n\n$b\n[1] 2\n\n$c\n[1] 3\n\n# same as the first, goes over all inputs\npurrr::pmap(l123, ~min(c(...)))\n\n$a\n[1] 1\n\n$b\n[1] 2\n\n$c\n[1] 3\n\n# only go over the first two\npurrr::pmap(l123, ~min(..2, ..3))\n\n$a\n[1] 11\n\n$b\n[1] 22\n\n$c\n[1] 33\n\n\n\n5.4.1 Count the number of numeric columns\n\n# count the numeric columns\n\nmtcars %>% \n  mutate(\n    min_numeric = pmap_dbl(select(., where(is.numeric)), ~length(c(...)))\n  ) %>% glimpse\n\nRows: 32\nColumns: 12\n$ mpg         <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2…\n$ cyl         <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4…\n$ disp        <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 14…\n$ hp          <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 1…\n$ drat        <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92…\n$ wt          <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.…\n$ qsec        <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22…\n$ vs          <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1…\n$ am          <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1…\n$ gear        <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4…\n$ carb        <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1…\n$ min_numeric <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11…\n\n\n\n\n5.4.2 turn each row into a list\n\n# mtcars is a list (a dataframe) with 12 elements, iteratre simultaneously over each of them\nready_for_d3 = purrr::pmap(mtcars, list)\nstr(ready_for_d3)\n\nList of 32\n $ :List of 11\n  ..$ mpg : num 21\n  ..$ cyl : num 6\n  ..$ disp: num 160\n  ..$ hp  : num 110\n  ..$ drat: num 3.9\n  ..$ wt  : num 2.62\n  ..$ qsec: num 16.5\n  ..$ vs  : num 0\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 21\n  ..$ cyl : num 6\n  ..$ disp: num 160\n  ..$ hp  : num 110\n  ..$ drat: num 3.9\n  ..$ wt  : num 2.88\n  ..$ qsec: num 17\n  ..$ vs  : num 0\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 22.8\n  ..$ cyl : num 4\n  ..$ disp: num 108\n  ..$ hp  : num 93\n  ..$ drat: num 3.85\n  ..$ wt  : num 2.32\n  ..$ qsec: num 18.6\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 21.4\n  ..$ cyl : num 6\n  ..$ disp: num 258\n  ..$ hp  : num 110\n  ..$ drat: num 3.08\n  ..$ wt  : num 3.21\n  ..$ qsec: num 19.4\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 18.7\n  ..$ cyl : num 8\n  ..$ disp: num 360\n  ..$ hp  : num 175\n  ..$ drat: num 3.15\n  ..$ wt  : num 3.44\n  ..$ qsec: num 17\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 18.1\n  ..$ cyl : num 6\n  ..$ disp: num 225\n  ..$ hp  : num 105\n  ..$ drat: num 2.76\n  ..$ wt  : num 3.46\n  ..$ qsec: num 20.2\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 14.3\n  ..$ cyl : num 8\n  ..$ disp: num 360\n  ..$ hp  : num 245\n  ..$ drat: num 3.21\n  ..$ wt  : num 3.57\n  ..$ qsec: num 15.8\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 24.4\n  ..$ cyl : num 4\n  ..$ disp: num 147\n  ..$ hp  : num 62\n  ..$ drat: num 3.69\n  ..$ wt  : num 3.19\n  ..$ qsec: num 20\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 4\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 22.8\n  ..$ cyl : num 4\n  ..$ disp: num 141\n  ..$ hp  : num 95\n  ..$ drat: num 3.92\n  ..$ wt  : num 3.15\n  ..$ qsec: num 22.9\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 4\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 19.2\n  ..$ cyl : num 6\n  ..$ disp: num 168\n  ..$ hp  : num 123\n  ..$ drat: num 3.92\n  ..$ wt  : num 3.44\n  ..$ qsec: num 18.3\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 4\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 17.8\n  ..$ cyl : num 6\n  ..$ disp: num 168\n  ..$ hp  : num 123\n  ..$ drat: num 3.92\n  ..$ wt  : num 3.44\n  ..$ qsec: num 18.9\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 4\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 16.4\n  ..$ cyl : num 8\n  ..$ disp: num 276\n  ..$ hp  : num 180\n  ..$ drat: num 3.07\n  ..$ wt  : num 4.07\n  ..$ qsec: num 17.4\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 3\n $ :List of 11\n  ..$ mpg : num 17.3\n  ..$ cyl : num 8\n  ..$ disp: num 276\n  ..$ hp  : num 180\n  ..$ drat: num 3.07\n  ..$ wt  : num 3.73\n  ..$ qsec: num 17.6\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 3\n $ :List of 11\n  ..$ mpg : num 15.2\n  ..$ cyl : num 8\n  ..$ disp: num 276\n  ..$ hp  : num 180\n  ..$ drat: num 3.07\n  ..$ wt  : num 3.78\n  ..$ qsec: num 18\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 3\n $ :List of 11\n  ..$ mpg : num 10.4\n  ..$ cyl : num 8\n  ..$ disp: num 472\n  ..$ hp  : num 205\n  ..$ drat: num 2.93\n  ..$ wt  : num 5.25\n  ..$ qsec: num 18\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 10.4\n  ..$ cyl : num 8\n  ..$ disp: num 460\n  ..$ hp  : num 215\n  ..$ drat: num 3\n  ..$ wt  : num 5.42\n  ..$ qsec: num 17.8\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 14.7\n  ..$ cyl : num 8\n  ..$ disp: num 440\n  ..$ hp  : num 230\n  ..$ drat: num 3.23\n  ..$ wt  : num 5.34\n  ..$ qsec: num 17.4\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 32.4\n  ..$ cyl : num 4\n  ..$ disp: num 78.7\n  ..$ hp  : num 66\n  ..$ drat: num 4.08\n  ..$ wt  : num 2.2\n  ..$ qsec: num 19.5\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 30.4\n  ..$ cyl : num 4\n  ..$ disp: num 75.7\n  ..$ hp  : num 52\n  ..$ drat: num 4.93\n  ..$ wt  : num 1.61\n  ..$ qsec: num 18.5\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 33.9\n  ..$ cyl : num 4\n  ..$ disp: num 71.1\n  ..$ hp  : num 65\n  ..$ drat: num 4.22\n  ..$ wt  : num 1.83\n  ..$ qsec: num 19.9\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 21.5\n  ..$ cyl : num 4\n  ..$ disp: num 120\n  ..$ hp  : num 97\n  ..$ drat: num 3.7\n  ..$ wt  : num 2.46\n  ..$ qsec: num 20\n  ..$ vs  : num 1\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 15.5\n  ..$ cyl : num 8\n  ..$ disp: num 318\n  ..$ hp  : num 150\n  ..$ drat: num 2.76\n  ..$ wt  : num 3.52\n  ..$ qsec: num 16.9\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 15.2\n  ..$ cyl : num 8\n  ..$ disp: num 304\n  ..$ hp  : num 150\n  ..$ drat: num 3.15\n  ..$ wt  : num 3.44\n  ..$ qsec: num 17.3\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 13.3\n  ..$ cyl : num 8\n  ..$ disp: num 350\n  ..$ hp  : num 245\n  ..$ drat: num 3.73\n  ..$ wt  : num 3.84\n  ..$ qsec: num 15.4\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 19.2\n  ..$ cyl : num 8\n  ..$ disp: num 400\n  ..$ hp  : num 175\n  ..$ drat: num 3.08\n  ..$ wt  : num 3.85\n  ..$ qsec: num 17.1\n  ..$ vs  : num 0\n  ..$ am  : num 0\n  ..$ gear: num 3\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 27.3\n  ..$ cyl : num 4\n  ..$ disp: num 79\n  ..$ hp  : num 66\n  ..$ drat: num 4.08\n  ..$ wt  : num 1.94\n  ..$ qsec: num 18.9\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 1\n $ :List of 11\n  ..$ mpg : num 26\n  ..$ cyl : num 4\n  ..$ disp: num 120\n  ..$ hp  : num 91\n  ..$ drat: num 4.43\n  ..$ wt  : num 2.14\n  ..$ qsec: num 16.7\n  ..$ vs  : num 0\n  ..$ am  : num 1\n  ..$ gear: num 5\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 30.4\n  ..$ cyl : num 4\n  ..$ disp: num 95.1\n  ..$ hp  : num 113\n  ..$ drat: num 3.77\n  ..$ wt  : num 1.51\n  ..$ qsec: num 16.9\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 5\n  ..$ carb: num 2\n $ :List of 11\n  ..$ mpg : num 15.8\n  ..$ cyl : num 8\n  ..$ disp: num 351\n  ..$ hp  : num 264\n  ..$ drat: num 4.22\n  ..$ wt  : num 3.17\n  ..$ qsec: num 14.5\n  ..$ vs  : num 0\n  ..$ am  : num 1\n  ..$ gear: num 5\n  ..$ carb: num 4\n $ :List of 11\n  ..$ mpg : num 19.7\n  ..$ cyl : num 6\n  ..$ disp: num 145\n  ..$ hp  : num 175\n  ..$ drat: num 3.62\n  ..$ wt  : num 2.77\n  ..$ qsec: num 15.5\n  ..$ vs  : num 0\n  ..$ am  : num 1\n  ..$ gear: num 5\n  ..$ carb: num 6\n $ :List of 11\n  ..$ mpg : num 15\n  ..$ cyl : num 8\n  ..$ disp: num 301\n  ..$ hp  : num 335\n  ..$ drat: num 3.54\n  ..$ wt  : num 3.57\n  ..$ qsec: num 14.6\n  ..$ vs  : num 0\n  ..$ am  : num 1\n  ..$ gear: num 5\n  ..$ carb: num 8\n $ :List of 11\n  ..$ mpg : num 21.4\n  ..$ cyl : num 4\n  ..$ disp: num 121\n  ..$ hp  : num 109\n  ..$ drat: num 4.11\n  ..$ wt  : num 2.78\n  ..$ qsec: num 18.6\n  ..$ vs  : num 1\n  ..$ am  : num 1\n  ..$ gear: num 4\n  ..$ carb: num 2"
  },
  {
    "objectID": "dplyr.html#where-vs-normal-tidy-select",
    "href": "dplyr.html#where-vs-normal-tidy-select",
    "title": "4  Dplyr",
    "section": "4.4 where vs “normal” tidy select",
    "text": "4.4 where vs “normal” tidy select\nThe docs say about where:\n\nwhere(): Applies a function to all variables and selects those for which the function returns TRUE.\n\nSo it essentially loops over the columns like lapply, whereas a code like this using the selection helpers only looks at the names of the variables:\n\nmtcars %>% select(matches(\"^d\")) %>% head\n\n                  disp drat\nMazda RX4          160 3.90\nMazda RX4 Wag      160 3.90\nDatsun 710         108 3.85\nHornet 4 Drive     258 3.08\nHornet Sportabout  360 3.15\nValiant            225 2.76\n\n\nThis works because the “normal” select also takes indexes and by looping over the columns with map_dbl and checking which mean > 10 returns 1 we get the indexes\n\nlibrary(purrr)\nmtcars %>% select(which(map_dbl(.,\n                                ~ mean(.x > 10)) == 1)) %>% head(n=2)\n\n              mpg disp  hp  qsec string\nMazda RX4      21  160 110 16.46      a\nMazda RX4 Wag  21  160 110 17.02      a\n\n\nThe same with where just that we need to take care of the string column as the function would return NA and that cant be used as index..\n\nlibrary(purrr)\nmtcars %>% select(where(~mean(.x) > 10 & !is.na(mean(.x))))\n\nWarning in mean.default(.x): argument is not numeric or logical: returning NA\n\nWarning in mean.default(.x): argument is not numeric or logical: returning NA\n\n\n                     mpg  disp  hp  qsec\nMazda RX4           21.0 160.0 110 16.46\nMazda RX4 Wag       21.0 160.0 110 17.02\nDatsun 710          22.8 108.0  93 18.61\nHornet 4 Drive      21.4 258.0 110 19.44\nHornet Sportabout   18.7 360.0 175 17.02\nValiant             18.1 225.0 105 20.22\nDuster 360          14.3 360.0 245 15.84\nMerc 240D           24.4 146.7  62 20.00\nMerc 230            22.8 140.8  95 22.90\nMerc 280            19.2 167.6 123 18.30\nMerc 280C           17.8 167.6 123 18.90\nMerc 450SE          16.4 275.8 180 17.40\nMerc 450SL          17.3 275.8 180 17.60\nMerc 450SLC         15.2 275.8 180 18.00\nCadillac Fleetwood  10.4 472.0 205 17.98\nLincoln Continental 10.4 460.0 215 17.82\nChrysler Imperial   14.7 440.0 230 17.42\nFiat 128            32.4  78.7  66 19.47\nHonda Civic         30.4  75.7  52 18.52\nToyota Corolla      33.9  71.1  65 19.90\nToyota Corona       21.5 120.1  97 20.01\nDodge Challenger    15.5 318.0 150 16.87\nAMC Javelin         15.2 304.0 150 17.30\nCamaro Z28          13.3 350.0 245 15.41\nPontiac Firebird    19.2 400.0 175 17.05\nFiat X1-9           27.3  79.0  66 18.90\nPorsche 914-2       26.0 120.3  91 16.70\nLotus Europa        30.4  95.1 113 16.90\nFord Pantera L      15.8 351.0 264 14.50\nFerrari Dino        19.7 145.0 175 15.50\nMaserati Bora       15.0 301.0 335 14.60\nVolvo 142E          21.4 121.0 109 18.60"
  }
]