[["dplyr.html", "Chapter 4 Dplyr 4.1 Ressources 4.2 What is tidy-select 4.3 Selecting columns 4.4 Filtering Rows 4.5 Rowwise Compute new Column with subset of existing columns 4.6 Adding column indicating if group if max value in group is in top-n max values per group 4.7 list Columns (and dplyr)", " Chapter 4 Dplyr library(tidyverse) library(magrittr) 4.1 Ressources 4.2 What is tidy-select Official docs here In the end you always want a boolean vector that has the length of the number of columns 4.3 Selecting columns 4.3.1 Selecting columns based on regex Look here for all the possible helper functions. If you wanna apply a regex yourself you can use the matches-function. However there are “helpers” e.g. starts_with… # select all columns with three characters mtcars %&gt;% select( matches(&quot;^[a-zA-Z]{3}$&quot;) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # cant use logical vector is select (e.g select(mtcars, c(TRUE, FALSE))) does not work # Must be indexes! mtcars %&gt;% select( which(grepl(&quot;^[a-zA-Z]{3}$&quot;, names(.))) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # select_if can use a boolean vector!! However is superseeded mtcars %&gt;% select_if( grepl(&quot;^[a-zA-Z]{3}$&quot;, names(.)) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # do the same in base r idx = grepl(&quot;^[a-zA-Z]{3}$&quot;, names(mtcars)) mtcars[, idx] ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 4.3.2 Selecting Columns based if any value in the column is na Approach 1 select(where(function(x){ mean(x) &gt; … })) mtcars_copy = mtcars mtcars_copy[2,2] = NA mtcars_copy %&gt;% head ## mpg cyl disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 NA 160 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 a # 1. mtcars_copy %&gt;% select(where(function(x) { sum(is.na(x)) == 0 })) ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a # 2. base r mtcars_copy[, colSums(is.na(mtcars_copy)) == 0] ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a # 3. apply mtcars_copy[, apply(mtcars_copy, 2, function(x) sum(is.na(x)) == 0)] ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a # using any mtcars_copy[, apply(mtcars_copy, 2, function(x) !any(is.na(x)))] ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a 4.3.3 Selecting Columns if the mean is &gt; … # add a string column mtcars[&quot;string&quot;] = &quot;a&quot; # select only string columns or numeric ones with a mean &gt; 10 # Should both work!! # mtcars %&gt;% # dplyr::select( # where( # function(x) is.character(x) | mean(x) &gt; 10 # ) # ) # mtcars %&gt;% # select( # where(function(x){ # if(is.numeric(x)){ # mean(x) &gt; 10 # }else{ # is.character(x) # must return true or false # } # }) # ) 4.3.4 Select Columns if the first value in the column is … mtcars %&gt;% select( where( function(x)x[[1]] == &quot;a&quot; ) ) ## string ## Mazda RX4 a ## Mazda RX4 Wag a ## Datsun 710 a ## Hornet 4 Drive a ## Hornet Sportabout a ## Valiant a ## Duster 360 a ## Merc 240D a ## Merc 230 a ## Merc 280 a ## Merc 280C a ## Merc 450SE a ## Merc 450SL a ## Merc 450SLC a ## Cadillac Fleetwood a ## Lincoln Continental a ## Chrysler Imperial a ## Fiat 128 a ## Honda Civic a ## Toyota Corolla a ## Toyota Corona a ## Dodge Challenger a ## AMC Javelin a ## Camaro Z28 a ## Pontiac Firebird a ## Fiat X1-9 a ## Porsche 914-2 a ## Lotus Europa a ## Ford Pantera L a ## Ferrari Dino a ## Maserati Bora a ## Volvo 142E a 4.4 Filtering Rows 4.5 Rowwise Compute new Column with subset of existing columns mtcars %&gt;% mutate( med = pmap_dbl(select(., where(is.numeric)), ~median(c(...), na.rm = T)) ) %&gt;% glimpse ## Rows: 32 ## Columns: 13 ## $ mpg &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,… ## $ cyl &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,… ## $ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16… ## $ hp &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180… ## $ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,… ## $ wt &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.… ## $ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18… ## $ vs &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,… ## $ am &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,… ## $ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,… ## $ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,… ## $ string &lt;chr&gt; &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, … ## $ med &lt;dbl&gt; 4.000, 4.000, 4.000, 3.215, 3.440, 3.460, 4.000, 4.000, 4.000, 4.… 4.6 Adding column indicating if group if max value in group is in top-n max values per group Steps: group_by the grouping variable summarise get the max value per group inneer_join the result with the original data-frame # which of the cyl-groups contains the two highest disp top12 = mtcars %&gt;% group_by(cyl) %&gt;% summarise(m = max(disp)) %&gt;% arrange(desc(m)) %&gt;% ungroup() %&gt;% mutate(top2 = if_else(row_number() %in% c(1,2), T, F)) %&gt;% inner_join( ., mtcars, by=c(&quot;cyl&quot;) ) 4.6.0.0.1 example of STACKOVERFLOW df = structure(list(id = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9), year = c(&quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot; ), volume = c(0.0013, 0.0013, 0.0012579, 0.0011895, 0.0011421, 0.0010842, 0.0010211, 0.0010158, 0.00099474, 0.00092632, 0.07878, 0.078791, 0.077295, 0.076638, 0.075538, 0.074468, 0.074776, 0.074051, 0.071706, 0.068056, 0.023269, 0.023011, 0.022374, 0.021962, 0.021408, 0.020949, 0.020811, 0.020354, 0.019309, 0.018042, 0.0004, 0.0004, 0.00038421, 0.00035263, 0.00033158, 0.00032105, 0.00026842, 0.00028421, 0.00026842, 0.00024211, 0.0002, 0.0001, 0.00011579, 0, 0, 0, 0, 0, 0, 0, 0.028422, 0.028361, 0.027768, 0.027501, 0.027029, 0.02651, 0.026588, 0.026209, 0.025094, 0.023391, 0.0001, 0.0001, 0, 0, 0, 0, 0, 0, 0, 0, 0.0047, 0.0047158, 0.0048368, 0.0048316, 0.0049263, 0.0049737, 0.0049947, 0.0051684, 0.0052526, 0.0051842, 0.0106, 0.010389, 0.010279, 0.010005, 0.0098421, 0.0096368, 0.0094053, 0.0093368, 0.0092526, 0.0089316)), class = c(&quot;tbl_df&quot;, &quot;tbl&quot;, &quot;data.frame&quot;), row.names = c(NA, -90L)) df %&gt;% group_by(id) %&gt;% summarise(m = max(volume)) %&gt;% arrange(desc(m)) %&gt;% mutate(top3 = if_else(row_number() %in% c(1, 2, 3), T, F)) %&gt;% inner_join(., df, by = c(&quot;id&quot;)) -&gt; top123 4.7 list Columns (and dplyr) tibbles and dataframes are lists of vectors!! l = tibble::tibble(x = runif(10), y = 1:10) typeof(l) ## [1] &quot;list&quot; image source: Meaning each column is a vector. Usually these are atomic vectors (recall chapter .. TODO in advanced R..), but these can also be lists. image source: List columns are much more versatile than atomic vectors. They can contain atomic vectors, other lists, tibbles, … 4.7.1 Creating List Columns It seems to be common to create list columns by modifying an existing “normal” tibble. Three common ways are: nest() summarise and list mutate and map 4.7.1.1 nest() When calling nest the first argument is the new column-name. In this case it is cars. The second argument are the columns you want to have in the resulting dataframe in each element of the list column. Each column you do not specify automatically becomes a grouping variable and all the resulting tibble will have as many rows as unique combinations in these grouping variables there are. mtcars_with_list_col = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% select(cyl, mpg, name) %&gt;% nest(cars = c(mpg, name)) # inspect it str(mtcars_with_list_col) ## tibble [3 × 2] (S3: tbl_df/tbl/data.frame) ## $ cyl : num [1:3] 6 4 8 ## $ cars:List of 3 ## ..$ : tibble [7 × 2] (S3: tbl_df/tbl/data.frame) ## .. ..$ mpg : num [1:7] 21 21 21.4 18.1 19.2 17.8 19.7 ## .. ..$ name: chr [1:7] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Hornet 4 Drive&quot; &quot;Valiant&quot; ... ## ..$ : tibble [11 × 2] (S3: tbl_df/tbl/data.frame) ## .. ..$ mpg : num [1:11] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26 30.4 ... ## .. ..$ name: chr [1:11] &quot;Datsun 710&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; &quot;Fiat 128&quot; ... ## ..$ : tibble [14 × 2] (S3: tbl_df/tbl/data.frame) ## .. ..$ mpg : num [1:14] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 ... ## .. ..$ name: chr [1:14] &quot;Hornet Sportabout&quot; &quot;Duster 360&quot; &quot;Merc 450SE&quot; &quot;Merc 450SL&quot; ... 4.7.1.2 summarise and list Normally you use group_by and summarise to collapse groups into single rows. You can also use group_by, summarise and list to create atomic vectors where each vector corresponds to one group of cyl mtcars_names_per_cyl = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% group_by(cyl) %&gt;% summarise(cars_per_cyl = list(name)) What if you want to manipulate each vector before putting it into the list column mtcars_names_per_cyl_sorted = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% group_by(cyl) %&gt;% summarise(cars_per_cyl = list(sort(name))) 4.7.1.3 mutate and map mtcars %&gt;% mutate(name = rownames(.)) %&gt;% mutate(random = map(name, ~ rnorm(n = str_length(.x)))) %&gt;% select(name, random) ## name ## Mazda RX4 Mazda RX4 ## Mazda RX4 Wag Mazda RX4 Wag ## Datsun 710 Datsun 710 ## Hornet 4 Drive Hornet 4 Drive ## Hornet Sportabout Hornet Sportabout ## Valiant Valiant ## Duster 360 Duster 360 ## Merc 240D Merc 240D ## Merc 230 Merc 230 ## Merc 280 Merc 280 ## Merc 280C Merc 280C ## Merc 450SE Merc 450SE ## Merc 450SL Merc 450SL ## Merc 450SLC Merc 450SLC ## Cadillac Fleetwood Cadillac Fleetwood ## Lincoln Continental Lincoln Continental ## Chrysler Imperial Chrysler Imperial ## Fiat 128 Fiat 128 ## Honda Civic Honda Civic ## Toyota Corolla Toyota Corolla ## Toyota Corona Toyota Corona ## Dodge Challenger Dodge Challenger ## AMC Javelin AMC Javelin ## Camaro Z28 Camaro Z28 ## Pontiac Firebird Pontiac Firebird ## Fiat X1-9 Fiat X1-9 ## Porsche 914-2 Porsche 914-2 ## Lotus Europa Lotus Europa ## Ford Pantera L Ford Pantera L ## Ferrari Dino Ferrari Dino ## Maserati Bora Maserati Bora ## Volvo 142E Volvo 142E ## random ## Mazda RX4 -1.57928510, -0.21180137, 0.08809049, 0.45082881, 0.13526684, -0.59175824, -0.59809617, 1.10411374, 2.49845353 ## Mazda RX4 Wag -1.0065678, 0.9941164, 0.1340556, 1.6162299, -0.7857404, 1.1476121, 1.1219694, -1.0380928, -1.9180916, 1.4732687, -0.1856567, 0.3250561, -1.1228660 ## Datsun 710 0.3368882, 1.9358338, -0.8363448, 0.3060196, 0.1716353, -0.2377243, 0.2767995, 0.3670238, -0.3280743, -0.5998949 ## Hornet 4 Drive 0.88502370, 0.17521634, -0.26483159, -1.30912946, -1.75230783, 1.63293458, 0.10598200, -1.58576949, 0.76993981, 1.16620020, 1.79834299, 0.02692262, -3.03913113, 0.49152285 ## Hornet Sportabout 0.452963608, 0.451550130, -1.086813432, 0.555150769, -0.815090949, -0.002250834, 0.043356701, -1.612642707, -2.215439260, 0.835305442, -0.621625328, -0.976901494, -0.757430080, -1.183470617, -0.778793746, -0.042329665, 0.379983100 ## Valiant -0.70685197, 1.11576250, 0.09162703, -0.12813964, 1.04854022, 0.83291014, -1.24577594 ## Duster 360 -0.03499938, 0.41287224, 0.83452770, -1.01509675, -0.68311968, -0.55796040, -1.65973138, -0.76400508, 0.50441372, -0.95735570 ## Merc 240D -0.12908242, 0.03578276, 1.08768913, 1.98105689, -0.88192174, 0.81038085, 0.30843201, 1.65378539, -0.16427225 ## Merc 230 -1.0597979, -0.9895732, 0.3102944, 0.1176879, -1.8431193, -1.7462452, 1.6747422, -1.6170980 ## Merc 280 1.1987303, -1.4428637, 1.0050655, 0.9208721, -1.4487803, 0.7707715, 1.6678711, 0.7453433 ## Merc 280C -0.3006338, -0.1271532, -0.2215781, 0.5259703, 0.5596383, 0.7648770, -0.2482729, -1.2893418, 0.2785298 ## Merc 450SE 0.95180101, -0.42485516, -0.01921101, 1.01308265, 0.55185999, 0.88090713, 0.64205443, 0.78187955, 1.92822211, -2.09784011 ## Merc 450SL 2.2392579, 0.9931241, 1.2560503, 0.3105693, -0.3998978, 0.4935881, -1.4654182, -1.1878745, 0.6004951, 0.5810709 ## Merc 450SLC 2.5851935, -2.8090150, -1.2748434, -0.9470099, 1.3446176, -0.3731880, -1.7219517, -0.1403540, -1.6749406, -0.7586175, 1.5887152 ## Cadillac Fleetwood -0.718380238, -0.160174141, 0.191517372, 0.284511999, -0.715385127, -0.194919740, 0.681002760, 0.242913107, -0.006739846, -0.432488563, -0.694059171, -0.298915816, -0.559169921, -1.402353273, 0.223471270, 0.630150324, -0.178962251, 0.590040763 ## Lincoln Continental -0.37423307, 1.37697984, -0.84498317, 1.14103694, -1.10394933, -2.09768169, -0.23871846, -0.89848438, 0.75667305, 0.96583176, -0.01049766, 0.48022926, 0.45564861, 0.47936039, -0.03220891, -0.18058526, 0.57064940, -1.09472192, 1.39237339 ## Chrysler Imperial -0.82660168, 1.73364036, -1.23555208, 0.10859313, 0.18099415, -1.03155610, 0.25904640, 0.86567575, 0.30747176, 0.03231679, -0.46971458, -2.16756420, -0.66420043, 0.64317159, 0.51837745, 2.46408583, -0.18273439 ## Fiat 128 1.0533727, -1.5361429, -1.4064068, -0.5820113, -1.0918526, 0.3152996, -0.8395288, 0.4397233 ## Honda Civic -0.55414038, -1.02093959, -0.20573614, -0.04575256, -2.15633577, 0.44396363, 0.17124292, 0.15835877, -1.01349026, -0.29645973, 1.98600917 ## Toyota Corolla 2.05470716, 0.26361421, 0.53832965, -1.22659112, 0.86515236, -0.73593311, -0.04853182, 1.23626068, 2.03758743, 1.26311049, -0.72596331, -0.58974705, 0.51338140, -0.29768762 ## Toyota Corona 1.5837662, 0.6077335, -0.1599914, 1.0539340, 0.4419390, -1.3325009, -0.3096186, 0.6139366, 0.2816738, -2.3393813, 1.1910055, 0.9244637, 0.3058373 ## Dodge Challenger 1.432497977, -2.071827887, -0.974410885, 0.501517747, 0.268363394, 0.125307259, 0.347479821, -1.199239073, 1.879199164, -0.004822725, -1.122908532, 0.450650176, -0.155947355, 0.332994249, 0.267309384, 1.773251756 ## AMC Javelin 0.4893479, -0.3188200, 0.2725752, -0.2257932, -1.0763506, 0.1145698, -0.7215651, -0.3363141, 0.2532402, 0.1976468, 0.8896007 ## Camaro Z28 0.3020520, -0.9084644, 1.7757902, 1.1789781, 1.2942127, 0.3381089, -1.2123102, -2.3182139, -0.1764786, 0.8781191 ## Pontiac Firebird 0.32108395, -1.24159866, 2.73081189, 0.16929514, -0.36804376, -0.10362736, -1.83444528, 0.11222753, -1.80664945, -0.52548708, 1.54719380, 0.36650158, -0.81285972, -1.35036127, 0.06025183, 0.85092012 ## Fiat X1-9 2.1119908, 1.0098417, -1.6858876, 0.9868785, 2.2544886, 0.2756245, 0.2955462, 0.1709615, 1.1815893 ## Porsche 914-2 -0.95150754, 1.89945600, -0.82988432, -1.17375693, -1.91137299, 1.72451558, 1.25203318, -0.05887136, -1.54732839, 0.03831917, 0.25809192, -0.26428463, 1.60453527 ## Lotus Europa 0.5105197, -0.6382015, -1.1335743, 2.0971744, -1.0006818, -0.7466354, 1.0945468, 0.3255321, -0.3690068, -1.2897078, 0.0933560, 0.1609766 ## Ford Pantera L 2.48454998, -2.14385896, 1.64385033, -1.54471793, -0.31229882, -3.34544716, 0.12461491, 1.83979666, 0.96093910, 0.54125295, -0.46841602, -0.28737628, -0.05041659, 0.02468290 ## Ferrari Dino 1.2416251, 0.2648349, 0.7961259, -1.4929452, 0.3021818, 1.0792615, 0.4297265, -1.5284199, -1.4063150, 1.3825049, 0.9244073, -0.2988631 ## Maserati Bora -1.12946471, -0.23928973, 2.17253228, -0.32274974, 0.85036754, 0.95348487, 0.24613671, -0.36497458, 0.84880208, -1.08955756, -1.53678814, -0.76922266, -0.07733798 ## Volvo 142E 1.14866363, -0.91528747, 0.25720320, -0.22371643, 0.88017976, 0.04668881, -0.13878711, 0.06910343, -0.85886245, -0.12461133 4.7.2 Manipulating say you want to get the number of rows for each data.frame in a list column Version 1 mtcars %&gt;% mutate(name = rownames(.)) %&gt;% nest(data_per_cyl = !cyl) %&gt;% mutate( nrow_per_cyl = map_dbl(data_per_cyl, nrow) ) ## # A tibble: 3 × 3 ## cyl data_per_cyl nrow_per_cyl ## &lt;dbl&gt; &lt;list&gt; &lt;dbl&gt; ## 1 6 &lt;tibble [7 × 12]&gt; 7 ## 2 4 &lt;tibble [11 × 12]&gt; 11 ## 3 8 &lt;tibble [14 × 12]&gt; 14 Version 2 usig rowwise mtcars %&gt;% mutate(name = rownames(.)) %&gt;% nest(data_per_cyl = !cyl) %&gt;% rowwise() %&gt;% mutate( nrow_per_cyl = nrow(data_per_cyl) ) ## # A tibble: 3 × 3 ## # Rowwise: ## cyl data_per_cyl nrow_per_cyl ## &lt;dbl&gt; &lt;list&gt; &lt;int&gt; ## 1 6 &lt;tibble [7 × 12]&gt; 7 ## 2 4 &lt;tibble [11 × 12]&gt; 11 ## 3 8 &lt;tibble [14 × 12]&gt; 14 4.7.3 purrr::pmap "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
