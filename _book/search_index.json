[["index.html", "R Chapter 1 This is the index page", " R Robin Kohrs 2022-07-09 Chapter 1 This is the index page "],["intro.html", "Chapter 2 Intro 2.1 attach a datframe", " Chapter 2 Intro 2.1 attach a datframe This creates a new environment suppressMessages(attach(mtcars)) plot(mpg, cyl) search() # list search paths for r objects -&gt; the mtcars object is now a search path ## [1] &quot;.GlobalEnv&quot; &quot;mtcars&quot; &quot;package:palmerpenguins&quot; &quot;package:ggtext&quot; ## [5] &quot;package:ggchicklet&quot; &quot;package:grid&quot; &quot;package:forcats&quot; &quot;package:dplyr&quot; ## [9] &quot;package:ggplot2&quot; &quot;tools:rstudio&quot; &quot;package:stats&quot; &quot;package:graphics&quot; ## [13] &quot;package:grDevices&quot; &quot;package:utils&quot; &quot;package:datasets&quot; &quot;package:methods&quot; ## [17] &quot;Autoloads&quot; &quot;org:r-lib&quot; &quot;package:base&quot; # http://adv-r.had.co.nz/Environments.html ls(envir=as.environment(mtcars)) ## [1] &quot;am&quot; &quot;carb&quot; &quot;cyl&quot; &quot;disp&quot; &quot;drat&quot; &quot;gear&quot; &quot;hp&quot; &quot;mpg&quot; &quot;qsec&quot; &quot;vs&quot; &quot;wt&quot; "],["data-types.html", "Chapter 3 Data Types 3.1 1D 3.2 2D 3.3 nd", " Chapter 3 Data Types 3.1 1D 3.1.1 Homogenoues 3.1.1.1 Vectors R has no scalars, only vectors. A scalar is a vector of length 1 3.1.2 Heterogenous 3.1.2.1 Lists 3.2 2D 3.2.1 Homogenoues 3.2.1.1 Matrices 3.2.1.1.0.1 Create a matrix The matrix is filled first down the columns To create a matrix you can give it the numbers and then provide the dimensions ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## [,1] [,2] ## [1,] 5 9 ## [2,] 6 10 ## [1] 5 6 7 8 ## [,1] ## [1,] 5 ## [2,] 6 ## [3,] 7 ## [4,] 8 3.2.2 Heterogenous 3.2.2.1 Data frames Data frames are lists 3.3 nd 3.3.1 Homogenoues 3.3.1.1 Arrays "],["dplyr.html", "Chapter 4 Dplyr 4.1 Ressources 4.2 What is tidy-select 4.3 Selecting columns 4.4 Filtering Rows 4.5 Rowwise Compute new Column with subset of existing columns 4.6 Adding column indicating if group if max value in group is in top-n max values per group 4.7 list Columns (and dplyr)", " Chapter 4 Dplyr library(tidyverse) library(magrittr) 4.1 Ressources 4.2 What is tidy-select Official docs here In the end you always want a boolean vector that has the length of the number of columns 4.3 Selecting columns 4.3.1 Selecting columns based on regex Look here for all the possible helper functions. If you wanna apply a regex yourself you can use the matches-function. However there are “helpers” e.g. starts_with… # select all columns with three characters mtcars %&gt;% select( matches(&quot;^[a-zA-Z]{3}$&quot;) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # cant use logical vector is select (e.g select(mtcars, c(TRUE, FALSE))) does not work # Must be indexes! mtcars %&gt;% select( which(grepl(&quot;^[a-zA-Z]{3}$&quot;, names(.))) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # select_if can use a boolean vector!! However is superseeded mtcars %&gt;% select_if( grepl(&quot;^[a-zA-Z]{3}$&quot;, names(.)) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # do the same in base r idx = grepl(&quot;^[a-zA-Z]{3}$&quot;, names(mtcars)) mtcars[, idx] ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 6 ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 4.3.2 Selecting Columns based if any value in the column is na Approach 1 select(where(function(x){ mean(x) &gt; … })) mtcars_copy = mtcars mtcars_copy[2,2] = NA mtcars_copy %&gt;% head ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 NA 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # 1. mtcars_copy %&gt;% select(where(function(x) { sum(is.na(x)) == 0 })) ## mpg disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 # 2. base r mtcars_copy[, colSums(is.na(mtcars_copy)) == 0] ## mpg disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 # 3. apply mtcars_copy[, apply(mtcars_copy, 2, function(x) sum(is.na(x)) == 0)] ## mpg disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 # using any mtcars_copy[, apply(mtcars_copy, 2, function(x) !any(is.na(x)))] ## mpg disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 4.3.3 Selecting Columns if the mean is &gt; … # add a string column mtcars[&quot;string&quot;] = &quot;a&quot; # select only string columns or numeric ones with a mean &gt; 10 # Should both work!! # mtcars %&gt;% # dplyr::select( # where( # function(x) is.character(x) | mean(x) &gt; 10 # ) # ) # mtcars %&gt;% # select( # where(function(x){ # if(is.numeric(x)){ # mean(x) &gt; 10 # }else{ # is.character(x) # must return true or false # } # }) # ) 4.3.4 Select Columns if the first value in the column is … mtcars %&gt;% select( where( function(x)x[[1]] == &quot;a&quot; ) ) ## string ## Mazda RX4 a ## Mazda RX4 Wag a ## Datsun 710 a ## Hornet 4 Drive a ## Hornet Sportabout a ## Valiant a ## Duster 360 a ## Merc 240D a ## Merc 230 a ## Merc 280 a ## Merc 280C a ## Merc 450SE a ## Merc 450SL a ## Merc 450SLC a ## Cadillac Fleetwood a ## Lincoln Continental a ## Chrysler Imperial a ## Fiat 128 a ## Honda Civic a ## Toyota Corolla a ## Toyota Corona a ## Dodge Challenger a ## AMC Javelin a ## Camaro Z28 a ## Pontiac Firebird a ## Fiat X1-9 a ## Porsche 914-2 a ## Lotus Europa a ## Ford Pantera L a ## Ferrari Dino a ## Maserati Bora a ## Volvo 142E a 4.4 Filtering Rows 4.5 Rowwise Compute new Column with subset of existing columns mtcars %&gt;% mutate( med = pmap_dbl(select(., where(is.numeric)), ~median(c(...), na.rm = T)) ) %&gt;% glimpse ## Rows: 32 ## Columns: 13 ## $ mpg [3m[38;5;246m&lt;dbl&gt;[39m[23m 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7,… ## $ cyl [3m[38;5;246m&lt;dbl&gt;[39m[23m 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4 ## $ disp [3m[38;5;246m&lt;dbl&gt;[39m[23m 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6, 275.8, 275.8, 275.8, 472… ## $ hp [3m[38;5;246m&lt;dbl&gt;[39m[23m 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150… ## $ drat [3m[38;5;246m&lt;dbl&gt;[39m[23m 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, 3.07, 3.07, 3.07, 2.93, 3.00, 3.23,… ## $ wt [3m[38;5;246m&lt;dbl&gt;[39m[23m 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440, 4.070, 3.730, 3.780, 5.2… ## $ qsec [3m[38;5;246m&lt;dbl&gt;[39m[23m 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90, 17.40, 17.60, 18.00, 17.… ## $ vs [3m[38;5;246m&lt;dbl&gt;[39m[23m 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1 ## $ am [3m[38;5;246m&lt;dbl&gt;[39m[23m 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 ## $ gear [3m[38;5;246m&lt;dbl&gt;[39m[23m 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 4 ## $ carb [3m[38;5;246m&lt;dbl&gt;[39m[23m 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1, 2, 2, 4, 6, 8, 2 ## $ string [3m[38;5;246m&lt;chr&gt;[39m[23m &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;… ## $ med [3m[38;5;246m&lt;dbl&gt;[39m[23m 4.000, 4.000, 4.000, 3.215, 3.440, 3.460, 4.000, 4.000, 4.000, 4.000, 4.000, 4.070, 3.730, 3.780, 5.2… 4.6 Adding column indicating if group if max value in group is in top-n max values per group Steps: group_by the grouping variable summarise get the max value per group inneer_join the result with the original data-frame # which of the cyl-groups contains the two highest disp top12 = mtcars %&gt;% group_by(cyl) %&gt;% summarise(m = max(disp)) %&gt;% arrange(desc(m)) %&gt;% ungroup() %&gt;% mutate(top2 = if_else(row_number() %in% c(1,2), T, F)) %&gt;% inner_join( ., mtcars, by=c(&quot;cyl&quot;) ) 4.6.0.0.1 example of STACKOVERFLOW df = structure(list(id = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9), year = c(&quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2024&quot;, &quot;2025&quot;, &quot;2026&quot; ), volume = c(0.0013, 0.0013, 0.0012579, 0.0011895, 0.0011421, 0.0010842, 0.0010211, 0.0010158, 0.00099474, 0.00092632, 0.07878, 0.078791, 0.077295, 0.076638, 0.075538, 0.074468, 0.074776, 0.074051, 0.071706, 0.068056, 0.023269, 0.023011, 0.022374, 0.021962, 0.021408, 0.020949, 0.020811, 0.020354, 0.019309, 0.018042, 0.0004, 0.0004, 0.00038421, 0.00035263, 0.00033158, 0.00032105, 0.00026842, 0.00028421, 0.00026842, 0.00024211, 0.0002, 0.0001, 0.00011579, 0, 0, 0, 0, 0, 0, 0, 0.028422, 0.028361, 0.027768, 0.027501, 0.027029, 0.02651, 0.026588, 0.026209, 0.025094, 0.023391, 0.0001, 0.0001, 0, 0, 0, 0, 0, 0, 0, 0, 0.0047, 0.0047158, 0.0048368, 0.0048316, 0.0049263, 0.0049737, 0.0049947, 0.0051684, 0.0052526, 0.0051842, 0.0106, 0.010389, 0.010279, 0.010005, 0.0098421, 0.0096368, 0.0094053, 0.0093368, 0.0092526, 0.0089316)), class = c(&quot;tbl_df&quot;, &quot;tbl&quot;, &quot;data.frame&quot;), row.names = c(NA, -90L)) df %&gt;% group_by(id) %&gt;% summarise(m = max(volume)) %&gt;% arrange(desc(m)) %&gt;% mutate(top3 = if_else(row_number() %in% c(1, 2, 3), T, F)) %&gt;% inner_join(., df, by = c(&quot;id&quot;)) -&gt; top123 4.7 list Columns (and dplyr) tibbles and dataframes are lists of vectors!! l = tibble::tibble(x = runif(10), y = 1:10) typeof(l) ## [1] &quot;list&quot; image source: Meaning each column is a vector. Usually these are atomic vectors (recall chapter .. TODO in advanced R..), but these can also be lists. image source: List columns are much more versatile than atomic vectors. They can contain atomic vectors, other lists, tibbles, … 4.7.1 Creating List Columns It seems to be common to create list columns by modifying an existing “normal” tibble. Three common ways are: nest() summarise and list mutate and map 4.7.1.1 nest() When calling nest the first argument is the new column-name. In this case it is cars. The second argument are the columns you want to have in the resulting dataframe in each element of the list column. Each column you do not specify automatically becomes a grouping variable and all the resulting tibble will have as many rows as unique combinations in these grouping variables there are. mtcars_with_list_col = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% select(cyl, mpg, name) %&gt;% nest(cars = c(mpg, name)) # inspect it str(mtcars_with_list_col) ## tibble [3 × 2] (S3: tbl_df/tbl/data.frame) ## $ cyl : num [1:3] 6 4 8 ## $ cars:List of 3 ## ..$ : tibble [7 × 2] (S3: tbl_df/tbl/data.frame) ## .. ..$ mpg : num [1:7] 21 21 21.4 18.1 19.2 17.8 19.7 ## .. ..$ name: chr [1:7] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Hornet 4 Drive&quot; &quot;Valiant&quot; ... ## ..$ : tibble [11 × 2] (S3: tbl_df/tbl/data.frame) ## .. ..$ mpg : num [1:11] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26 30.4 ... ## .. ..$ name: chr [1:11] &quot;Datsun 710&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; &quot;Fiat 128&quot; ... ## ..$ : tibble [14 × 2] (S3: tbl_df/tbl/data.frame) ## .. ..$ mpg : num [1:14] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 ... ## .. ..$ name: chr [1:14] &quot;Hornet Sportabout&quot; &quot;Duster 360&quot; &quot;Merc 450SE&quot; &quot;Merc 450SL&quot; ... 4.7.1.2 summarise and list Normally you use group_by and summarise to collapse groups into single rows. You can also use group_by, summarise and list to create atomic vectors where each vector corresponds to one group of cyl mtcars_names_per_cyl = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% group_by(cyl) %&gt;% summarise(cars_per_cyl = list(name)) What if you want to manipulate each vector before putting it into the list column mtcars_names_per_cyl_sorted = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% group_by(cyl) %&gt;% summarise(cars_per_cyl = list(sort(name))) 4.7.1.3 mutate and map n_values_per_car_letter = mtcars %&gt;% mutate(name = rownames(.)) %&gt;% mutate(random = map(name, ~ rnorm(n = str_length(.x)))) %&gt;% select(name, random) str(n_values_per_car_letter) ## &#39;data.frame&#39;: 32 obs. of 2 variables: ## $ name : chr &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; &quot;Hornet 4 Drive&quot; ... ## $ random:List of 32 ## ..$ : num -1.55965 -0.36433 -0.00423 0.94024 1.67223 ... ## ..$ : num 0.6224 -1.1962 -2.3067 1.9585 -0.0843 ... ## ..$ : num 0.131 0.443 0.04 -0.402 0.827 ... ## ..$ : num 0.61 0.63 1.036 0.457 -0.705 ... ## ..$ : num 1.0089 -0.0704 0.893 -0.2866 -0.1931 ... ## ..$ : num 0.545 1.099 1.729 0.137 0.198 ... ## ..$ : num 0.4992 -0.241 -1.3455 0.0906 -1.2542 ... ## ..$ : num -0.283 -1.63 1.127 1.561 0.161 ... ## ..$ : num -0.531 0.182 -0.577 0.102 -0.597 ... ## ..$ : num -0.135 -0.562 0.823 -0.177 1.02 ... ## ..$ : num -2.242 -0.2 0.229 -1.424 1.935 ... ## ..$ : num -2.133 -1.306 2.147 -2.203 -0.506 ... ## ..$ : num -0.54 0.885 -0.271 0.146 0.295 ... ## ..$ : num -0.147 -0.758 0.111 -2.188 -1.237 ... ## ..$ : num 0.00676 -0.28968 -0.90222 -0.9335 1.76382 ... ## ..$ : num -0.325 0.537 -0.857 0.106 -0.281 ... ## ..$ : num 0.2582 0.9811 2.1431 -0.0967 0.3572 ... ## ..$ : num -0.41 0.189 -1.44 -1.578 -0.831 ... ## ..$ : num -0.673 -1.012 -1.768 1.499 -0.14 ... ## ..$ : num 0.0209 -0.779 0.2796 1.4111 -0.4292 ... ## ..$ : num -0.0844 1.5062 -1.2214 -1.1946 1.0583 ... ## ..$ : num 0.176 -2.277 -0.534 -0.552 -0.884 ... ## ..$ : num -0.371 0.209 1.276 0.677 -1.426 ... ## ..$ : num -0.772 -0.484 -0.215 0.605 -0.736 ... ## ..$ : num -0.0464 0.5238 -0.6053 -1.3328 1.0591 ... ## ..$ : num 1.473 1.63 -1.797 0.272 1.187 ... ## ..$ : num 0.6818 0.1851 -0.0193 -1.2157 -0.504 ... ## ..$ : num -0.702 -1.418 0.134 -0.399 2.088 ... ## ..$ : num 0.265 -1.208 0.345 -0.655 -0.177 ... ## ..$ : num -1.685 -1.441 -1.196 0.893 -0.499 ... ## ..$ : num -0.514 0.126 1.778 -0.219 0.758 ... ## ..$ : num -0.0634 -0.4908 -0.7768 0.4533 -1.7318 ... 4.7.2 Manipulating say you want to get the number of rows for each data.frame in a list column Version 1 mtcars %&gt;% mutate(name = rownames(.)) %&gt;% nest(data_per_cyl = !cyl) %&gt;% mutate( nrow_per_cyl = map_dbl(data_per_cyl, nrow) ) ## # A tibble: 3 × 3 ## cyl data_per_cyl nrow_per_cyl ## &lt;dbl&gt; &lt;list&gt; &lt;dbl&gt; ## 1 6 &lt;tibble [7 × 12]&gt; 7 ## 2 4 &lt;tibble [11 × 12]&gt; 11 ## 3 8 &lt;tibble [14 × 12]&gt; 14 Version 2 usig rowwise mtcars %&gt;% mutate(name = rownames(.)) %&gt;% nest(data_per_cyl = !cyl) %&gt;% rowwise() %&gt;% mutate( nrow_per_cyl = nrow(data_per_cyl) ) ## # A tibble: 3 × 3 ## # Rowwise: ## cyl data_per_cyl nrow_per_cyl ## &lt;dbl&gt; &lt;list&gt; &lt;int&gt; ## 1 6 &lt;tibble [7 × 12]&gt; 7 ## 2 4 &lt;tibble [11 × 12]&gt; 11 ## 3 8 &lt;tibble [14 × 12]&gt; 14 "],["mapping.html", "Chapter 5 Mapping 5.1 base::apply 5.2 purr::map 5.3 purrr::map2 5.4 purrr::pmap", " Chapter 5 Mapping 5.1 base::apply 5.2 purr::map 5.2.1 Find the number of NAs per column in a dataframe map(mtcars %&gt;% select(where(is.numeric)), ~sum(is.na(.x))) ## $mpg ## [1] 0 ## ## $cyl ## [1] 0 ## ## $disp ## [1] 0 ## ## $hp ## [1] 0 ## ## $drat ## [1] 0 ## ## $wt ## [1] 0 ## ## $qsec ## [1] 0 ## ## $vs ## [1] 0 ## ## $am ## [1] 0 ## ## $gear ## [1] 0 ## ## $carb ## [1] 0 5.3 purrr::map2 df = tibble( a = c(1, 2, 4), b = c(6, 5, 3) ) df %&gt;% mutate( min_a_b = map2_dbl(a,b,min) ) ## # A tibble: 3 × 3 ## a b min_a_b ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 6 1 ## 2 2 5 2 ## 3 4 3 3 By default, mutate() uses column-wise operations. map2_dbl() produces a column the same length at a and b. We can accomplish the same calculation using row-wise operations. df %&gt;% rowwise() %&gt;% mutate(min = min(a, b)) %&gt;% ungroup() ## # A tibble: 3 × 3 ## a b min ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 6 1 ## 2 2 5 2 ## 3 4 3 3 5.4 purrr::pmap takes an arbitrary amout of lists as input. However: The actual input to purrr::map is ONE SINGLE LIST l1 = list(a = 1, b=2, c=3) l2 = list(a = 11, b=22, c=33) l3 = list(a = 111, b=222, c=333) l123 = list(l1, l2, l3) # go over the three lists in parallel and each time select the minimal value purrr::pmap(l123, min) ## $a ## [1] 1 ## ## $b ## [1] 2 ## ## $c ## [1] 3 # same as the first, goes over all inputs purrr::pmap(l123, ~min(c(...))) ## $a ## [1] 1 ## ## $b ## [1] 2 ## ## $c ## [1] 3 # only go over the first two purrr::pmap(l123, ~min(..2, ..3)) ## $a ## [1] 11 ## ## $b ## [1] 22 ## ## $c ## [1] 33 5.4.1 Count the number of numeric columns # count the numeric columns mtcars %&gt;% mutate( min_numeric = pmap_dbl(select(., where(is.numeric)), ~length(c(...))) ) %&gt;% glimpse ## Rows: 32 ## Columns: 13 ## $ mpg &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, … ## $ cyl &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4 ## $ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6, 275.8, 275.8, 275.8… ## $ hp &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97… ## $ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, 3.07, 3.07, 3.07, 2.93, 3.00, … ## $ wt &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440, 4.070, 3.730, 3.780… ## $ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90, 17.40, 17.60, 18.00… ## $ vs &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1 ## $ am &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 ## $ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 4 ## $ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1, 2, 2, 4, 6, 8, 2 ## $ string &lt;chr&gt; &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;… ## $ min_numeric &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, … 5.4.2 turn each row into a list # mtcars is a list (a dataframe) with 12 elements, iteratre simultaneously over each of them ready_for_d3 = purrr::pmap(mtcars, list) str(ready_for_d3) ## List of 32 ## $ :List of 12 ## ..$ mpg : num 21 ## ..$ cyl : num 6 ## ..$ disp : num 160 ## ..$ hp : num 110 ## ..$ drat : num 3.9 ## ..$ wt : num 2.62 ## ..$ qsec : num 16.5 ## ..$ vs : num 0 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 21 ## ..$ cyl : num 6 ## ..$ disp : num 160 ## ..$ hp : num 110 ## ..$ drat : num 3.9 ## ..$ wt : num 2.88 ## ..$ qsec : num 17 ## ..$ vs : num 0 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 22.8 ## ..$ cyl : num 4 ## ..$ disp : num 108 ## ..$ hp : num 93 ## ..$ drat : num 3.85 ## ..$ wt : num 2.32 ## ..$ qsec : num 18.6 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 21.4 ## ..$ cyl : num 6 ## ..$ disp : num 258 ## ..$ hp : num 110 ## ..$ drat : num 3.08 ## ..$ wt : num 3.21 ## ..$ qsec : num 19.4 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 18.7 ## ..$ cyl : num 8 ## ..$ disp : num 360 ## ..$ hp : num 175 ## ..$ drat : num 3.15 ## ..$ wt : num 3.44 ## ..$ qsec : num 17 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 18.1 ## ..$ cyl : num 6 ## ..$ disp : num 225 ## ..$ hp : num 105 ## ..$ drat : num 2.76 ## ..$ wt : num 3.46 ## ..$ qsec : num 20.2 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 14.3 ## ..$ cyl : num 8 ## ..$ disp : num 360 ## ..$ hp : num 245 ## ..$ drat : num 3.21 ## ..$ wt : num 3.57 ## ..$ qsec : num 15.8 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 24.4 ## ..$ cyl : num 4 ## ..$ disp : num 147 ## ..$ hp : num 62 ## ..$ drat : num 3.69 ## ..$ wt : num 3.19 ## ..$ qsec : num 20 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 4 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 22.8 ## ..$ cyl : num 4 ## ..$ disp : num 141 ## ..$ hp : num 95 ## ..$ drat : num 3.92 ## ..$ wt : num 3.15 ## ..$ qsec : num 22.9 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 4 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 19.2 ## ..$ cyl : num 6 ## ..$ disp : num 168 ## ..$ hp : num 123 ## ..$ drat : num 3.92 ## ..$ wt : num 3.44 ## ..$ qsec : num 18.3 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 4 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 17.8 ## ..$ cyl : num 6 ## ..$ disp : num 168 ## ..$ hp : num 123 ## ..$ drat : num 3.92 ## ..$ wt : num 3.44 ## ..$ qsec : num 18.9 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 4 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 16.4 ## ..$ cyl : num 8 ## ..$ disp : num 276 ## ..$ hp : num 180 ## ..$ drat : num 3.07 ## ..$ wt : num 4.07 ## ..$ qsec : num 17.4 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 3 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 17.3 ## ..$ cyl : num 8 ## ..$ disp : num 276 ## ..$ hp : num 180 ## ..$ drat : num 3.07 ## ..$ wt : num 3.73 ## ..$ qsec : num 17.6 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 3 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 15.2 ## ..$ cyl : num 8 ## ..$ disp : num 276 ## ..$ hp : num 180 ## ..$ drat : num 3.07 ## ..$ wt : num 3.78 ## ..$ qsec : num 18 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 3 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 10.4 ## ..$ cyl : num 8 ## ..$ disp : num 472 ## ..$ hp : num 205 ## ..$ drat : num 2.93 ## ..$ wt : num 5.25 ## ..$ qsec : num 18 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 10.4 ## ..$ cyl : num 8 ## ..$ disp : num 460 ## ..$ hp : num 215 ## ..$ drat : num 3 ## ..$ wt : num 5.42 ## ..$ qsec : num 17.8 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 14.7 ## ..$ cyl : num 8 ## ..$ disp : num 440 ## ..$ hp : num 230 ## ..$ drat : num 3.23 ## ..$ wt : num 5.34 ## ..$ qsec : num 17.4 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 32.4 ## ..$ cyl : num 4 ## ..$ disp : num 78.7 ## ..$ hp : num 66 ## ..$ drat : num 4.08 ## ..$ wt : num 2.2 ## ..$ qsec : num 19.5 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 30.4 ## ..$ cyl : num 4 ## ..$ disp : num 75.7 ## ..$ hp : num 52 ## ..$ drat : num 4.93 ## ..$ wt : num 1.61 ## ..$ qsec : num 18.5 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 33.9 ## ..$ cyl : num 4 ## ..$ disp : num 71.1 ## ..$ hp : num 65 ## ..$ drat : num 4.22 ## ..$ wt : num 1.83 ## ..$ qsec : num 19.9 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 21.5 ## ..$ cyl : num 4 ## ..$ disp : num 120 ## ..$ hp : num 97 ## ..$ drat : num 3.7 ## ..$ wt : num 2.46 ## ..$ qsec : num 20 ## ..$ vs : num 1 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 15.5 ## ..$ cyl : num 8 ## ..$ disp : num 318 ## ..$ hp : num 150 ## ..$ drat : num 2.76 ## ..$ wt : num 3.52 ## ..$ qsec : num 16.9 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 15.2 ## ..$ cyl : num 8 ## ..$ disp : num 304 ## ..$ hp : num 150 ## ..$ drat : num 3.15 ## ..$ wt : num 3.44 ## ..$ qsec : num 17.3 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 13.3 ## ..$ cyl : num 8 ## ..$ disp : num 350 ## ..$ hp : num 245 ## ..$ drat : num 3.73 ## ..$ wt : num 3.84 ## ..$ qsec : num 15.4 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 19.2 ## ..$ cyl : num 8 ## ..$ disp : num 400 ## ..$ hp : num 175 ## ..$ drat : num 3.08 ## ..$ wt : num 3.85 ## ..$ qsec : num 17.1 ## ..$ vs : num 0 ## ..$ am : num 0 ## ..$ gear : num 3 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 27.3 ## ..$ cyl : num 4 ## ..$ disp : num 79 ## ..$ hp : num 66 ## ..$ drat : num 4.08 ## ..$ wt : num 1.94 ## ..$ qsec : num 18.9 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 1 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 26 ## ..$ cyl : num 4 ## ..$ disp : num 120 ## ..$ hp : num 91 ## ..$ drat : num 4.43 ## ..$ wt : num 2.14 ## ..$ qsec : num 16.7 ## ..$ vs : num 0 ## ..$ am : num 1 ## ..$ gear : num 5 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 30.4 ## ..$ cyl : num 4 ## ..$ disp : num 95.1 ## ..$ hp : num 113 ## ..$ drat : num 3.77 ## ..$ wt : num 1.51 ## ..$ qsec : num 16.9 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 5 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 15.8 ## ..$ cyl : num 8 ## ..$ disp : num 351 ## ..$ hp : num 264 ## ..$ drat : num 4.22 ## ..$ wt : num 3.17 ## ..$ qsec : num 14.5 ## ..$ vs : num 0 ## ..$ am : num 1 ## ..$ gear : num 5 ## ..$ carb : num 4 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 19.7 ## ..$ cyl : num 6 ## ..$ disp : num 145 ## ..$ hp : num 175 ## ..$ drat : num 3.62 ## ..$ wt : num 2.77 ## ..$ qsec : num 15.5 ## ..$ vs : num 0 ## ..$ am : num 1 ## ..$ gear : num 5 ## ..$ carb : num 6 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 15 ## ..$ cyl : num 8 ## ..$ disp : num 301 ## ..$ hp : num 335 ## ..$ drat : num 3.54 ## ..$ wt : num 3.57 ## ..$ qsec : num 14.6 ## ..$ vs : num 0 ## ..$ am : num 1 ## ..$ gear : num 5 ## ..$ carb : num 8 ## ..$ string: chr &quot;a&quot; ## $ :List of 12 ## ..$ mpg : num 21.4 ## ..$ cyl : num 4 ## ..$ disp : num 121 ## ..$ hp : num 109 ## ..$ drat : num 4.11 ## ..$ wt : num 2.78 ## ..$ qsec : num 18.6 ## ..$ vs : num 1 ## ..$ am : num 1 ## ..$ gear : num 4 ## ..$ carb : num 2 ## ..$ string: chr &quot;a&quot; "],["ggplot.html", "Chapter 6 GGPLOT 6.1 Internals 6.2 Examples", " Chapter 6 GGPLOT library(ggplot2) 6.1 Internals The data ## names count share label color ## v1 v1 55 0.76 76 % #df91a3 ## v2 v2 13 0.18 18 % #A5AA99 ## v3 v3 2 0.03 &lt;NA&gt; #A5AA99 ## v4 v4 2 0.03 &lt;NA&gt; #A5AA99 6.1.1 Inspecting a Horizontal Stacked Bar Chart pl_works = ggplot(df) + geom_col( aes(x = share, y = &quot;a&quot;, group = names), color = &quot;black&quot;, fill = df$color, position = ggplot2::position_fill() ) pl_not_works = ggplot(df) + geom_col( aes(x = share, y = 1, group = names), color = &quot;black&quot;, fill = df$color, position = ggplot2::position_fill() ) 6.1.1.0.1 The Computed Data The ggplot function ggplot2::layer_data( &lt;plot-object&gt; ) gives you back the data that is used to draw the objects Similarly the ggplot2::ggplot_build( &lt;plot-object&gt; ) gives you back a list with the elements data (again), layout and the actual plot already! As the ggplot_build()-function is a method (like print is), it could (in theory be used for other objects too). So you can inspect it with ggplot2:::ggplot_build.ggplot ## function (plot) ## { ## plot &lt;- plot_clone(plot) ## if (length(plot$layers) == 0) { ## plot &lt;- plot + geom_blank() ## } ## layers &lt;- plot$layers ## layer_data &lt;- lapply(layers, function(y) y$layer_data(plot$data)) ## scales &lt;- plot$scales ## by_layer &lt;- function(f) { ## out &lt;- vector(&quot;list&quot;, length(data)) ## for (i in seq_along(data)) { ## out[[i]] &lt;- f(l = layers[[i]], d = data[[i]]) ## } ## out ## } ## data &lt;- layer_data ## data &lt;- by_layer(function(l, d) l$setup_layer(d, plot)) ## layout &lt;- create_layout(plot$facet, plot$coordinates) ## data &lt;- layout$setup(data, plot$data, plot$plot_env) ## data &lt;- by_layer(function(l, d) l$compute_aesthetics(d, plot)) ## data &lt;- lapply(data, scales_transform_df, scales = scales) ## scale_x &lt;- function() scales$get_scales(&quot;x&quot;) ## scale_y &lt;- function() scales$get_scales(&quot;y&quot;) ## layout$train_position(data, scale_x(), scale_y()) ## data &lt;- layout$map_position(data) ## data &lt;- by_layer(function(l, d) l$compute_statistic(d, layout)) ## data &lt;- by_layer(function(l, d) l$map_statistic(d, plot)) ## scales_add_missing(plot, c(&quot;x&quot;, &quot;y&quot;), plot$plot_env) ## data &lt;- by_layer(function(l, d) l$compute_geom_1(d)) ## data &lt;- by_layer(function(l, d) l$compute_position(d, layout)) ## layout$reset_scales() ## layout$train_position(data, scale_x(), scale_y()) ## layout$setup_panel_params() ## data &lt;- layout$map_position(data) ## npscales &lt;- scales$non_position_scales() ## if (npscales$n() &gt; 0) { ## lapply(data, scales_train_df, scales = npscales) ## data &lt;- lapply(data, scales_map_df, scales = npscales) ## } ## data &lt;- by_layer(function(l, d) l$compute_geom_2(d)) ## data &lt;- by_layer(function(l, d) l$finish_statistics(d)) ## data &lt;- layout$finish_data(data) ## plot$labels$alt &lt;- get_alt_text(plot) ## structure(list(data = data, layout = layout, plot = plot), ## class = &quot;ggplot_built&quot;) ## } ## &lt;bytecode: 0x559a8094f150&gt; ## &lt;environment: namespace:ggplot2&gt; ld_works = layer_data(pl_works) %&gt;% mutate(works = &quot;y&quot;) %&gt;% as_tibble() ld_not_works = layer_data(pl_not_works) %&gt;% mutate(works = &quot;n&quot;) %&gt;% as_tibble() curve_df = data.frame( x = .2, y = 1, xend = .7, yend = 1.2 ) pl_works + geom_curve(data = curve_df, aes( x = x, y = y, xend = xend, yend = yend )) 6.2 Examples 6.2.1 1: Stacked Horizontal Chicklets From here # load libraries # devtools::install_github(&quot;tidyverse/ggplot2&quot;) library(ggplot2) library(ggchicklet) library(ggtext) library(dplyr) library(forcats) library(grid) # import data dat &lt;- dat &lt;- data.frame( Sport = c(&quot;NFL&quot;, &quot;NFL&quot;, &quot;NFL&quot;, &quot;MLB&quot;, &quot;MLB&quot;, &quot;MLB&quot;, &quot;NBA&quot;, &quot;NBA&quot;, &quot;NBA&quot;, &quot;NHL&quot;, &quot;NHL&quot;, &quot;NHL&quot;, &quot;EPL&quot;, &quot;EPL&quot;, &quot;EPL&quot;), Type = c(&quot;Game Action&quot;, &quot;Nonaction&quot;, &quot;Commercials&quot;, &quot;Game Action&quot;, &quot;Nonaction&quot;, &quot;Commercials&quot;, &quot;Game Action&quot;, &quot;Nonaction&quot;, &quot;Commercials&quot;, &quot;Game Action&quot;, &quot;Nonaction&quot;, &quot;Commercials&quot;, &quot;Game Action&quot;, &quot;Nonaction&quot;, &quot;Commercials&quot;), Time = c(18, 140.6, 49.9, 22.5, 150.9, 51.8, 49.6, 61.8, 33.5, 63, 56.6, 37.4, 58.7, 47.8, 10.1), stringsAsFactors = FALSE) # refactor levels dat &lt;- dat %&gt;% group_by(Sport) %&gt;% mutate(Percent = Time/sum(Time)) %&gt;% ungroup() %&gt;% mutate(Sport = fct_relevel( Sport, rev(c(&quot;NFL&quot;, &quot;MLB&quot;, &quot;NBA&quot;, &quot;NHL&quot;, &quot;EPL&quot;))) ) %&gt;% mutate(Type = fct_relevel( Type, c(&quot;Commercials&quot;,&quot;Nonaction&quot;,&quot;Game Action&quot;)) ) # keep trailing zeroes and add &quot;min&quot; to first bar value labels dat$Label &lt;- as.character(sprintf(&quot;%.1f&quot;, dat$Time)) dat$Label &lt;- ifelse(dat$Type == &quot;Game Action&quot;, paste0(dat$Label, &quot; min&quot;), dat$Label) # generate plot gg &lt;- ggplot(dat, aes(Sport, Percent, fill = Type, label = Label)) + geom_chicklet( width = 1, radius = unit(6, units = &quot;pt&quot;), position = ggplot2::position_stack(reverse = FALSE) ) + geom_text(size = 4, fontface = &quot;bold&quot;, position = position_stack(vjust = 0.5)) + scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) + coord_flip() + theme_minimal() + theme( legend.position = &quot;top&quot;, plot.title = element_markdown(hjust = 0.5, family = &quot;Raleway&quot;), plot.subtitle = element_markdown(hjust = 0.5), plot.caption = element_markdown( hjust = 0, size = 11, margin = unit(c(0, 0, 0, 0), &quot;cm&quot;), color = &quot;#718c9e&quot; ), legend.text = element_markdown(size = 11), axis.text = element_text(face = &quot;bold&quot;, size = 11), axis.text.x = element_blank(), axis.title.y = element_markdown( hjust = 0, size = 20, margin = unit(c(0, 0, 0, 0), &quot;cm&quot;), color = &quot;#718c9e&quot; ), panel.grid = element_blank(), axis.title.x = element_markdown( halign = 0, margin = margin(2, 0, 15, 0), fill = &quot;transparent&quot; ) ) + scale_fill_manual( name = NULL, values = c( `Game Action` = &quot;#FA759F&quot;, Nonaction = &quot;#B5BEC9&quot;, Commercials = &quot;#72D4DB&quot; ), labels = c( # `Game Action` = &quot;&lt;strong style=&#39;color:#FA759F&#39;&gt;GAME ACTION&lt;/strong&gt; (BALL OR PUCK IN PLAY)&quot;, # Nonaction = &quot;&lt;strong style=&#39;color:#B5BEC9&#39;&gt;NONACTION&lt;/strong&gt; (GAME STOPPAGE, COMMENTARY, ETC.)&quot;, # Commercials = &quot;&lt;strong style=&#39;color:#72D4DB&#39;&gt;COMMERCIALS&lt;/strong&gt;&quot;) `Game Action` = &quot;&lt;strong&gt;GAME ACTION&lt;/strong&gt; (BALL OR PUCK IN PLAY)&quot;, Nonaction = &quot;&lt;strong&gt;NONACTION&lt;/strong&gt; (GAME STOPPAGE, COMMENTARY, ETC.)&quot;, Commercials = &quot;&lt;strong&gt;COMMERCIALS&lt;/strong&gt;&quot; ), guide = guide_legend(reverse = TRUE) ) + labs( y = &quot;&lt;span style=&#39;font-size:13pt;&#39;&gt;The average share of broadcast time showing &lt;strong style=&#39;color:#FA759F&#39;&gt;GAME ACTION&lt;/strong&gt; is highest in&lt;br&gt;the English Premier League - but there is more total action in an average&lt;br&gt;National Hockey League game, which lasts longer.&lt;/span&gt;&quot;, x = NULL, fill = NULL, title = &quot;&lt;b&gt;NFL and MLB games are long, slow affairs&lt;/b&gt;&quot;, subtitle = &quot;Minutes by broadcast by what is shown on screen across five major men&#39;s sports leagues&quot;, caption = &quot;Games that we included: 10 NFL regular-season games between Nov. 7 amd Nov. 18, 2019. 17 MLB postseason games, including all the games in the 2019 ACLS, NLCS, and World&lt;br&gt;Series; 10 NBA regular-season games between Nov. 6 and Nov. 15, 2019; 10 NHL regular-season games between Nov. 5 and Nov. 19, 2019, including three overtime games; and&lt;br&gt;seven English Premier League games between Nov. 9 and Nov. 23, 2019. NBA game action includes free throws, so the action time exceeds the game time.&lt;br&gt; &lt;br&gt; FivethirtyEight SOURCE: UNIVERSITY OF TEXAS AT AUSTIN SPORTS ANALYTICS COURSE&quot; ) gg alignTitles &lt;- function(ggplot, title = NULL, subtitle = NULL, caption = NULL) { # grab the saved ggplot2 object g &lt;- ggplotGrob(ggplot) # find the object which provides the plot information for the title, subtitle, and caption if(!is.null(title)) { g$layout[which(g$layout$name == &quot;title&quot;),]$l &lt;- title } if(!is.null(subtitle)) { g$layout[which(g$layout$name == &quot;subtitle&quot;),]$l &lt;- subtitle } if(!is.null(caption)) { g$layout[which(g$layout$name == &quot;caption&quot;),]$l &lt;- caption } g } # align caption to y axis value labels gg2 &lt;- alignTitles(gg, caption = 2) grid.draw(gg2) # add arrow x &lt;- rev(c(0.25, 0.25, 0.28, 0.28)) y &lt;- rev(c(0.2, 0.15, 0.15, 0.15)) grid.bezier(x, y, gp=gpar(lwd=1.5, fill=&quot;black&quot;), arrow=arrow(type=&quot;open&quot;,length = unit(0.1, &quot;inches&quot;))) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
