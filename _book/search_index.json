[["index.html", "R Chapter 1 Some other stuff 1.1 attach a data frame", " R Robin Kohrs 2022-05-16 Chapter 1 Some other stuff 1.1 attach a data frame "],["intro.html", "Chapter 2 Intro 2.1 attach a datframe", " Chapter 2 Intro 2.1 attach a datframe This creates a new environment attach(mtcars) ## Das folgende Objekt ist maskiert package:ggplot2: ## ## mpg ## Die folgenden Objekte sind maskiert von mtcars (pos = 11): ## ## am, carb, cyl, disp, drat, gear, hp, mpg, qsec, string, vs, wt ## Die folgenden Objekte sind maskiert von mtcars (pos = 12): ## ## am, carb, cyl, disp, drat, gear, hp, mpg, qsec, vs, wt ## Die folgenden Objekte sind maskiert von mtcars (pos = 15): ## ## am, carb, cyl, disp, drat, gear, hp, mpg, qsec, vs, wt plot(mpg, cyl) search() # list search paths for r objects -&gt; the mtcars object is now a search path ## [1] &quot;.GlobalEnv&quot; &quot;mtcars&quot; &quot;package:forcats&quot; ## [4] &quot;package:stringr&quot; &quot;package:purrr&quot; &quot;package:readr&quot; ## [7] &quot;package:tidyr&quot; &quot;package:tibble&quot; &quot;package:ggplot2&quot; ## [10] &quot;package:tidyverse&quot; &quot;mtcars&quot; &quot;mtcars&quot; ## [13] &quot;package:magrittr&quot; &quot;package:dplyr&quot; &quot;mtcars&quot; ## [16] &quot;tools:rstudio&quot; &quot;package:stats&quot; &quot;package:graphics&quot; ## [19] &quot;package:grDevices&quot; &quot;package:utils&quot; &quot;package:datasets&quot; ## [22] &quot;package:methods&quot; &quot;Autoloads&quot; &quot;org:r-lib&quot; ## [25] &quot;package:base&quot; # http://adv-r.had.co.nz/Environments.html ls(envir=as.environment(mtcars)) ## [1] &quot;am&quot; &quot;carb&quot; &quot;cyl&quot; &quot;disp&quot; &quot;drat&quot; &quot;gear&quot; &quot;hp&quot; ## [8] &quot;mpg&quot; &quot;qsec&quot; &quot;string&quot; &quot;vs&quot; &quot;wt&quot; "],["data-types.html", "Chapter 3 Data Types 3.1 1D 3.2 2D 3.3 nd", " Chapter 3 Data Types 3.1 1D 3.1.1 Homogenoues 3.1.1.1 Vectors R has no scalars, only vectors. A scalar is a vector of length 1 3.1.2 Heterogenous 3.1.2.1 Lists 3.2 2D 3.2.1 Homogenoues 3.2.1.1 Matrices 3.2.1.1.0.1 Create a matrix The matrix is filled first down the columns To create a matrix you can give it the numbers and then provide the dimensions ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## [,1] [,2] ## [1,] 5 9 ## [2,] 6 10 ## [1] 5 6 7 8 ## [,1] ## [1,] 5 ## [2,] 6 ## [3,] 7 ## [4,] 8 3.2.2 Heterogenous 3.2.2.1 Data frames Data frames are lists 3.3 nd 3.3.1 Homogenoues 3.3.1.1 Arrays "],["dplyr.html", "Chapter 4 Dplyr 4.1 Ressources 4.2 What is tidy-select 4.3 Selecting columns 4.4 Filtering Rows", " Chapter 4 Dplyr library(tidyverse) library(magrittr) 4.1 Ressources 4.2 What is tidy-select Official docs here In the end you always want a boolean vector that has the length of the number of columns 4.3 Selecting columns 4.3.1 Selecting columns based on regex Look here for all the possible helper functions. If you wanna apply a regex yourself you can use the matches-function. However there are “helpers” e.g. starts_with… # select all columns with three characters mtcars %&gt;% select( matches(&quot;^[a-zA-Z]{3}$&quot;) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 NA ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # cant use logical vector is select (e.g select(mtcars, c(TRUE, FALSE))) does not work # Must be indexes! mtcars %&gt;% select( which(grepl(&quot;^[a-zA-Z]{3}$&quot;, names(.))) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 NA ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # select_if can use a boolean vector!! However is superseeded mtcars %&gt;% select_if( grepl(&quot;^[a-zA-Z]{3}$&quot;, names(.)) ) ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 NA ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 # do the same in base r idx = grepl(&quot;^[a-zA-Z]{3}$&quot;, names(mtcars)) mtcars[, idx] ## mpg cyl ## Mazda RX4 21.0 6 ## Mazda RX4 Wag 21.0 NA ## Datsun 710 22.8 4 ## Hornet 4 Drive 21.4 6 ## Hornet Sportabout 18.7 8 ## Valiant 18.1 6 ## Duster 360 14.3 8 ## Merc 240D 24.4 4 ## Merc 230 22.8 4 ## Merc 280 19.2 6 ## Merc 280C 17.8 6 ## Merc 450SE 16.4 8 ## Merc 450SL 17.3 8 ## Merc 450SLC 15.2 8 ## Cadillac Fleetwood 10.4 8 ## Lincoln Continental 10.4 8 ## Chrysler Imperial 14.7 8 ## Fiat 128 32.4 4 ## Honda Civic 30.4 4 ## Toyota Corolla 33.9 4 ## Toyota Corona 21.5 4 ## Dodge Challenger 15.5 8 ## AMC Javelin 15.2 8 ## Camaro Z28 13.3 8 ## Pontiac Firebird 19.2 8 ## Fiat X1-9 27.3 4 ## Porsche 914-2 26.0 4 ## Lotus Europa 30.4 4 ## Ford Pantera L 15.8 8 ## Ferrari Dino 19.7 6 ## Maserati Bora 15.0 8 ## Volvo 142E 21.4 4 4.3.2 Selecting Columns based if any value in the column is na Approach 1 select(where(function(x){ mean(x) &gt; … })) mtcars[2,2] = NA mtcars %&gt;% head ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 NA 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 ## string ## Mazda RX4 a ## Mazda RX4 Wag a ## Datsun 710 a ## Hornet 4 Drive a ## Hornet Sportabout a ## Valiant a # 1. mtcars %&gt;% select(where(function(x) { sum(is.na(x)) == 0 })) ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a # 2. base r mtcars[, colSums(is.na(mtcars)) == 0] ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a # 3. apply mtcars[, apply(mtcars, 2, function(x) sum(is.na(x)) == 0)] ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a # using any mtcars[, apply(mtcars, 2, function(x) !any(is.na(x)))] ## mpg disp hp drat wt qsec vs am gear carb string ## Mazda RX4 21.0 160.0 110 3.90 2.620 16.46 0 1 4 4 a ## Mazda RX4 Wag 21.0 160.0 110 3.90 2.875 17.02 0 1 4 4 a ## Datsun 710 22.8 108.0 93 3.85 2.320 18.61 1 1 4 1 a ## Hornet 4 Drive 21.4 258.0 110 3.08 3.215 19.44 1 0 3 1 a ## Hornet Sportabout 18.7 360.0 175 3.15 3.440 17.02 0 0 3 2 a ## Valiant 18.1 225.0 105 2.76 3.460 20.22 1 0 3 1 a ## Duster 360 14.3 360.0 245 3.21 3.570 15.84 0 0 3 4 a ## Merc 240D 24.4 146.7 62 3.69 3.190 20.00 1 0 4 2 a ## Merc 230 22.8 140.8 95 3.92 3.150 22.90 1 0 4 2 a ## Merc 280 19.2 167.6 123 3.92 3.440 18.30 1 0 4 4 a ## Merc 280C 17.8 167.6 123 3.92 3.440 18.90 1 0 4 4 a ## Merc 450SE 16.4 275.8 180 3.07 4.070 17.40 0 0 3 3 a ## Merc 450SL 17.3 275.8 180 3.07 3.730 17.60 0 0 3 3 a ## Merc 450SLC 15.2 275.8 180 3.07 3.780 18.00 0 0 3 3 a ## Cadillac Fleetwood 10.4 472.0 205 2.93 5.250 17.98 0 0 3 4 a ## Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82 0 0 3 4 a ## Chrysler Imperial 14.7 440.0 230 3.23 5.345 17.42 0 0 3 4 a ## Fiat 128 32.4 78.7 66 4.08 2.200 19.47 1 1 4 1 a ## Honda Civic 30.4 75.7 52 4.93 1.615 18.52 1 1 4 2 a ## Toyota Corolla 33.9 71.1 65 4.22 1.835 19.90 1 1 4 1 a ## Toyota Corona 21.5 120.1 97 3.70 2.465 20.01 1 0 3 1 a ## Dodge Challenger 15.5 318.0 150 2.76 3.520 16.87 0 0 3 2 a ## AMC Javelin 15.2 304.0 150 3.15 3.435 17.30 0 0 3 2 a ## Camaro Z28 13.3 350.0 245 3.73 3.840 15.41 0 0 3 4 a ## Pontiac Firebird 19.2 400.0 175 3.08 3.845 17.05 0 0 3 2 a ## Fiat X1-9 27.3 79.0 66 4.08 1.935 18.90 1 1 4 1 a ## Porsche 914-2 26.0 120.3 91 4.43 2.140 16.70 0 1 5 2 a ## Lotus Europa 30.4 95.1 113 3.77 1.513 16.90 1 1 5 2 a ## Ford Pantera L 15.8 351.0 264 4.22 3.170 14.50 0 1 5 4 a ## Ferrari Dino 19.7 145.0 175 3.62 2.770 15.50 0 1 5 6 a ## Maserati Bora 15.0 301.0 335 3.54 3.570 14.60 0 1 5 8 a ## Volvo 142E 21.4 121.0 109 4.11 2.780 18.60 1 1 4 2 a 4.3.3 Selecting Columns if the mean is &gt; … # add a string column mtcars[&quot;string&quot;] = &quot;a&quot; # select only string columns or numeric ones with a mean &gt; 10 # Should both work!! # mtcars %&gt;% # dplyr::select( # where( # function(x) is.character(x) | mean(x) &gt; 10 # ) # ) # mtcars %&gt;% # select( # where(function(x){ # if(is.numeric(x)){ # mean(x) &gt; 10 # }else{ # is.character(x) # must return true or false # } # }) # ) 4.3.4 Select Columns if the first value in the column is … mtcars %&gt;% select( where( function(x)x[[1]] == &quot;a&quot; ) ) ## string ## Mazda RX4 a ## Mazda RX4 Wag a ## Datsun 710 a ## Hornet 4 Drive a ## Hornet Sportabout a ## Valiant a ## Duster 360 a ## Merc 240D a ## Merc 230 a ## Merc 280 a ## Merc 280C a ## Merc 450SE a ## Merc 450SL a ## Merc 450SLC a ## Cadillac Fleetwood a ## Lincoln Continental a ## Chrysler Imperial a ## Fiat 128 a ## Honda Civic a ## Toyota Corolla a ## Toyota Corona a ## Dodge Challenger a ## AMC Javelin a ## Camaro Z28 a ## Pontiac Firebird a ## Fiat X1-9 a ## Porsche 914-2 a ## Lotus Europa a ## Ford Pantera L a ## Ferrari Dino a ## Maserati Bora a ## Volvo 142E a 4.4 Filtering Rows "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
